I"0<blockquote>
  <p>HTML Games are fun way to practice your HTML <code class="highlighter-rouge">canvas</code> tag skills as well as Javascript concepts.</p>
</blockquote>

<h1 id="html5--js-games---an-intro-to-the-canvas-element-">HTML5 + JS Games - An Intro to the Canvas Element ðŸ‘¾</h1>

<p>Couple of weeks ago I built a clone of the arcade classic snake, <a href="http://fbohz.com/html5_games/retro_snake.html">Retro Snake</a>. Today weâ€™ll talk about some basic concepts involved in building HTML5 and JS games.</p>

<p><strong>HTML Canvas</strong></p>

<p>HTML Games are fun way to practice your HTML <code class="highlighter-rouge">canvas</code> tag skills as well as Javascript concepts.</p>

<p><code class="highlighter-rouge">&lt;canvas&gt;</code> is an element that has height/width and you can draw anything inside.</p>
<ul>
  <li>Canvas is like a box with a border. Inside of the box you can make another box, circle, line and text. You cannot do anything outside of the canvas.</li>
  <li>Canvas is defined inside the body.</li>
</ul>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;canvas</span> <span class="na">height=</span><span class="s">"500"</span> <span class="na">width=</span><span class="s">"500"</span> 
    <span class="na">style=</span><span class="s">"border: 2px solid #000;"</span> 
    <span class="na">id=</span><span class="s">"ctx"</span><span class="nt">&gt;&lt;/canvas&gt;</span>
<span class="nt">&lt;/body&gt;</span>
</code></pre></div></div>

<p><strong>Adding Text with JS to Canvas</strong></p>

<p><code class="highlighter-rouge">getContext()</code> is used in JS and â€˜2dâ€™ to specify as two-dimension.</p>

<p>With <code class="highlighter-rouge">fillText()</code> you can add text, in specific x and y coordinates, and get something like this:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">ctx</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">ctx</span><span class="dl">"</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">getContext</span><span class="p">(</span><span class="dl">'</span><span class="s1">2d</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">ctx</span><span class="p">.</span><span class="nx">fillText</span><span class="p">(</span><span class="dl">"</span><span class="s2">HOLA BRAVE NEW WORLD!</span><span class="dl">"</span><span class="p">,</span> <span class="mi">150</span><span class="p">,</span> <span class="mi">250</span><span class="p">);</span>
</code></pre></div></div>

<p><img src="https://user-images.githubusercontent.com/15071636/81889102-61502080-9568-11ea-952c-96daee4d9c55.png" alt="1" /></p>

<p>To make font larger you can do like <code class="highlighter-rouge">ctx.font = "30px Calibri"</code>.</p>

<p><strong>Draw a Line in Canvas</strong></p>

<p><code class="highlighter-rouge">strokeText()</code>: gives embossed look to font.</p>

<p><code class="highlighter-rouge">moveTo()</code>: takes two params. First cursor will move to specific position. You use it to draw lines with <code class="highlighter-rouge">lineTo()</code>. You can then create line with <code class="highlighter-rouge">stroke()</code>.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">ctx</span><span class="p">.</span><span class="nx">moveTo</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span><span class="mi">300</span><span class="p">)</span>
<span class="nx">ctx</span><span class="p">.</span><span class="nx">lineTo</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span><span class="mi">300</span><span class="p">)</span>
<span class="nx">ctx</span><span class="p">.</span><span class="nx">stroke</span><span class="p">();</span>
</code></pre></div></div>

<p>So first two methods define line, third draws the line.</p>

<p><code class="highlighter-rouge">fillStyle()</code>. You can add color such as <code class="highlighter-rouge">ctx.fillStyle = '#efa556'</code> into a rectangle with <code class="highlighter-rouge">fillRect()</code>.</p>

<p><code class="highlighter-rouge">fillRect()</code> takes four arguments. The first two position then next two width and height of rectangle as <code class="highlighter-rouge">ctx.fillRect(250, 300, 200, 300);</code>.</p>

<p><img src="https://user-images.githubusercontent.com/15071636/81889930-57c7b800-956a-11ea-9b2a-66d24fb86c55.png" alt="2" /></p>

<p><strong>Canvas State</strong></p>

<p>The canvas object we identified as <code class="highlighter-rouge">ctx</code> has many properties like weâ€™ve been describing. Sometimes if we <code class="highlighter-rouge">fillStyle()</code> ctx then everything after could be red as well!</p>

<p>To manage this we have <em>canvas state</em>.</p>

<ul>
  <li><code class="highlighter-rouge">save()</code>: whatever was the state we want to save at that point like a <em>checkpoint</em></li>
  <li>we can then call <code class="highlighter-rouge">restore()</code> to restore to previous state.</li>
</ul>

<p>So when we do modification on canvas and then save the checkpoint and then restore as we need it.</p>

<p><strong>Drawing JS Objects in the Canvas</strong></p>

<p>Lets try to draw this object:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">square</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">width</span><span class="p">:</span> <span class="mi">300</span><span class="p">,</span>
    <span class="na">height</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span>
    <span class="na">x</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span>
    <span class="na">y</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span>
    <span class="na">color</span><span class="p">:</span> <span class="dl">'</span><span class="s1">red</span><span class="dl">'</span>
<span class="p">}</span>

</code></pre></div></div>

<p>We can easily draw our square by accessing the square attributes:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">ctx</span><span class="p">.</span><span class="nx">fillStyle</span> <span class="o">=</span> <span class="nx">square</span><span class="p">.</span><span class="nx">color</span>
<span class="nx">ctx</span><span class="p">.</span><span class="nx">fillRect</span><span class="p">(</span>
    <span class="nx">square</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span> <span class="nx">square</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span> 
    <span class="nx">square</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span> <span class="nx">square</span><span class="p">.</span><span class="nx">height</span>
    <span class="p">)</span>
</code></pre></div></div>

<p><strong>Using JS Functions</strong></p>

<p>Games like video are just a <em>series of frames</em>. The main difference is that you <em>can interact with the game</em> and not the video.</p>

<p>We use the <code class="highlighter-rouge">setInterval()</code> to accomplish this. This will call the function every specified time. If we have <code class="highlighter-rouge">setInterval(myFunction(),1000)</code> then it will be like <em>1fps</em>, as every 1 second there will be new frame. It will be very slow game so we can decrease when <code class="highlighter-rouge">setInterval()</code> can be called to have more frames.</p>

<p><strong>User Inputs &amp; Event Handling</strong></p>

<p>You can control events with keyboard and mouse such as:</p>

<ul>
  <li><code class="highlighter-rouge">onmousedown</code></li>
  <li><code class="highlighter-rouge">onmouseup</code></li>
  <li><code class="highlighter-rouge">onkeydown</code></li>
</ul>

<p>Here are some examples:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">ctx</span><span class="dl">"</span><span class="p">).</span><span class="nx">onmousedown</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">ctx</span><span class="p">.</span><span class="nx">fillStyle</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">blue</span><span class="dl">'</span><span class="p">;</span>
    <span class="nx">ctx</span><span class="p">.</span><span class="nx">fillRect</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span><span class="mi">100</span><span class="p">,</span><span class="mi">50</span><span class="p">,</span><span class="mi">50</span><span class="p">);</span>

<span class="p">}</span>


<span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">ctx</span><span class="dl">"</span><span class="p">).</span><span class="nx">onmouseup</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">ctx</span><span class="p">.</span><span class="nx">fillStyle</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">red</span><span class="dl">'</span><span class="p">;</span>
    <span class="nx">ctx</span><span class="p">.</span><span class="nx">fillRect</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span><span class="mi">100</span><span class="p">,</span><span class="mi">50</span><span class="p">,</span><span class="mi">50</span><span class="p">);</span>

<span class="p">}</span>

<span class="nb">document</span><span class="p">.</span><span class="nx">onkeydown</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">//a = 65 code</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">keyCode</span> <span class="o">==</span> <span class="mi">65</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">ctx</span><span class="p">.</span><span class="nx">fillText</span><span class="p">(</span><span class="dl">'</span><span class="s1">A has been pressed</span><span class="dl">'</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span><span class="mi">100</span><span class="p">);</span>
    <span class="p">}</span>

<span class="p">}</span>
</code></pre></div></div>

<p><strong>Recap</strong></p>

<p>When building HTML5 + JS games make sure you:</p>

<ol>
  <li>Declare the <code class="highlighter-rouge">canvas</code> element.</li>
  <li>Build objects of the game. For example: Snake and Food (for Snake game).</li>
  <li>Draw objects in the canvas.</li>
  <li>Move objects as required.</li>
  <li>Use functions to meet game requirements. Make sure you have the game requirements clear.</li>
  <li>Add common features such as scores, game over, initial screen etc.</li>
  <li>Add other features. E.g difficulty.</li>
</ol>

<p><strong>Resources</strong></p>

<ul>
  <li>Hereâ€™s my implementation of snake, <a href="http://fbohz.com/html5_games/retro_snake.html"><b>Retro Snake</b></a>. Note I used Express/MongoDB as a backend to track high scores.</li>
  <li>Read <a href="https://www.w3schools.com/graphics/canvas_drawing.asp"><b>W3 Schools HTML Canvas Drawing</b></a>.</li>
  <li>Checkout <a href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Drawing_shapes"><b>MDN Drawing Shapes with Canvas</b></a>.</li>
</ul>
:ET