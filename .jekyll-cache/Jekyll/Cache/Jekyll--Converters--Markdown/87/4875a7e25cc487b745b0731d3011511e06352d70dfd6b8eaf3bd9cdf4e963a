I"ô\<blockquote>
  <p>With Express we can easily build an stateless API‚Ä¶and follow patterns such as REST to build routes with GET, POST, PUT, you name it!</p>
</blockquote>

<h1 id="nodejs--express---baby-steps-">Node.js + Express - Baby Steps üçº</h1>

<p>Today we‚Äôll be taking some baby steps into the Node.js world üë∂üèΩ. You can check the latest incarnation of the <a href="https://github.com/fbohz/ybz-backend-node-express">Yijing Ball-Z with Node/Express</a> as you follow along.</p>

<p>Node.js: Pros vs Cons</p>

<p><img src="https://user-images.githubusercontent.com/15071636/86070758-140a0e80-ba43-11ea-8d52-74dbefbf529b.png" alt="Screen Shot 2020-06-29 at 7 57 33 PM" /></p>

<p>In Node we have synchronous code, which can be called also <em>blocking code</em>. Async code is non-blocking that can run the background. So by running code in the background it seems faster and the app can do many things at the same time. Node usually has its sync vs async versions of methods e.g. readFile vs readFileSync. Unless it is top level code do not run sync methods. More on this to follow.</p>

<p><strong>Asynchronous Nature of Node.js</strong></p>

<p>Node is single threaded, so all users access the same single thread. If a user access the line with synchronous code it can be a problem (e.g. read very large file), with async code then multiple users can run queries at same time (e.g. login, read file, logout etc). So time-consuming data can run in background and once completed will finish the request.</p>

<p>Example of blocking vs non-blocking code:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// playing with fs module - SYNCHRONOUS / BLOCKING</span>

<span class="kd">const</span> <span class="nx">t1</span> <span class="o">=</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="dl">"</span><span class="s2">./large-txt</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">utf-8</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">t2</span> <span class="o">=</span> <span class="s2">`</span><span class="p">${</span><span class="nx">t1</span><span class="p">}</span><span class="s2"> \n Done </span><span class="p">${</span><span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="p">()}</span><span class="s2">`</span><span class="p">;</span>

<span class="nx">fs</span><span class="p">.</span><span class="nx">writeFileSync</span><span class="p">(</span><span class="dl">"</span><span class="s2">./txt/output.txt</span><span class="dl">"</span><span class="p">,</span> <span class="nx">t2</span><span class="p">);</span>

<span class="c1">//  NON BLOCK - ASYNC EXAMPLE</span>

<span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span>
  <span class="dl">"</span><span class="s2">./txt/start.txt</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">utf-8</span><span class="dl">"</span><span class="p">,</span>
  <span class="c1">// be wary of callback hell nesting here</span>
  <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">);</span>
</code></pre></div></div>

<p>Node.js is built on callbacks. But be wary of <em>callback hell</em>, e.g.</p>

<p><img src="https://user-images.githubusercontent.com/15071636/86073609-b927e580-ba49-11ea-98fb-810268dba659.png" alt="Screen Shot 2020-06-29 at 8 46 45 PM" /></p>

<p>Node is well known for callbacks to start nesting many levels down. We can escape this callback hell with async await or promises (I‚Äôll discuss this in a future article).</p>

<h2 id="creating-a-simple-web-server">Creating a Simple Web Server</h2>

<p>We can create a simple node server as this:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">http</span><span class="dl">"</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">((</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="dl">"</span><span class="s2">Hellooo</span><span class="dl">"</span><span class="p">);</span>
<span class="p">});</span>

<span class="c1">// saved variable then listen port</span>
<span class="c1">// localhost default is '127.0.0.1'</span>
<span class="nx">server</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">8000</span><span class="p">,</span> <span class="dl">"</span><span class="s2">127.0.0.1</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">listening on port 8000</span><span class="dl">"</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>

<p>By using <code class="language-plaintext highlighter-rouge">createServer()</code> we then pass the callback function executed each time the server is requested. Then we listen on port 8000. So if you go to http://localhost:8000 on your browser you‚Äôll see: ‚ÄòHellooo‚Äô. Can it get more easy?</p>

<p>Now if you console.log the <code class="language-plaintext highlighter-rouge">req</code> object you‚Äôll see a bunch of stuff, so we get access to a bunch of stuff to handle requests.</p>

<p><strong>Routing with Pure Node.js</strong></p>

<p>Routing can get complicated in a big app so Express is recommended but we‚Äôll talk about  it next. For now we can modify our server as this:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">((</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="kd">const</span> <span class="nx">pathName</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">url</span>

<span class="k">if</span> <span class="p">(</span><span class="nx">pathName</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="dl">'</span><span class="s1">Hellooo Root</span><span class="dl">'</span><span class="p">)</span>
<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">pathName</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">/product</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="dl">'</span><span class="s1">Hellooo Product</span><span class="dl">'</span><span class="p">)</span>
<span class="p">}</span> <span class="k">else</span>  <span class="p">{</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="mi">404</span><span class="p">,</span> <span class="p">{</span>
        <span class="dl">'</span><span class="s1">Content-type</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">text/html</span><span class="dl">'</span><span class="p">,</span>
        <span class="dl">'</span><span class="s1">my-own-header</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">hello-world</span><span class="dl">'</span>
        <span class="p">});</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="dl">'</span><span class="s1">&lt;h1&gt;Page not found!&lt;/h1&gt;</span><span class="dl">'</span><span class="p">);</span>
<span class="p">}}</span>
</code></pre></div></div>

<p>On the 404 response we send back a header, which is a piece of info about the response sent back. <code class="language-plaintext highlighter-rouge">my-own-header</code> is like custom metadata we can see on the console then Network tab on Chrome.</p>

<h2 id="sneak-peak-of-express">Sneak-peak of Express</h2>

<p>Express is a Node.js framework with useful abstractions. It is the most popular framework. It has some characteristics.</p>

<ul>
  <li>Allows for easy organization into MVC structure</li>
  <li>Rapid development of Node.js by implementing some robust features including server-side rendering, middleware, complex routing, better handling of response/request cycle.</li>
</ul>

<p>So we can write apps so much faster, looks simpler as well.</p>

<p><strong>Express Setup and Basic Routing</strong></p>

<p>Note Express is fully written on Node but it abstracts away all the complexities.</p>

<p>To start make sure you <code class="language-plaintext highlighter-rouge">npm init</code> and <code class="language-plaintext highlighter-rouge">npm i express</code>. Then create your <code class="language-plaintext highlighter-rouge">App.js</code> file that will contain your express server. Example</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">express</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>

<span class="c1">// routing with GET</span>

<span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">/</span><span class="dl">"</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">200</span><span class="p">).</span><span class="nx">json</span><span class="p">({</span>
    <span class="na">message</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Hi from Express world!</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">app</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Museo API</span><span class="dl">"</span><span class="p">,</span>
  <span class="p">});</span>
<span class="p">});</span>

<span class="kd">const</span> <span class="nx">port</span> <span class="o">=</span> <span class="mi">4000</span><span class="p">;</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">port</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Listening on port </span><span class="p">${</span><span class="nx">port</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>

<p>Here <code class="language-plaintext highlighter-rouge">.get()</code> similar to Node, which has access to the request and response objects, but in Express there are even more methods. Now if you navigate to localhost:4000 you get ‚ÄúHello from Express World!‚Äù as JSON and thus we have an Express API!.</p>

<p>Another thing you can see is that Express automatically sends app headers for you. With Express we can easily build an stateless API (in which the client will ask for specific info) and follow patterns such as REST to build routes with GET, POST, PUT, you name it!</p>

<p>Wanna checkout a quick demo of simple API implementation? Check <a href="https://github.com/fbohz/museo-node/blob/1.basicExpress/app.js">this repo</a>.</p>

<p><strong>Express Request / Response Cycle</strong></p>

<p>When Express receives a request, it creates a request and response object. Data will be used to process the data. To do this you can use some middleware, which intercepts and does something with the data on different stages. So here middleware is between request and response. There‚Äôs the saying that everything is middleware, so router, setting headers, logging, parsing body.</p>

<p>All middleware used in Express is called <em>middleware stack</em>. The req/res objects go into these middlewares and they call the <code class="language-plaintext highlighter-rouge">next()</code> function to move to the next middleware. This is called the pipeline until it reaches the final middleware that usually uses the <code class="language-plaintext highlighter-rouge">res.send()</code> method or similar (like <code class="language-plaintext highlighter-rouge">res.json()</code>). You can define your own middlewares:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">((</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="c1">// current time of request e.g.</span>
  <span class="nx">req</span><span class="p">.</span><span class="nx">requestTime</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">().</span><span class="nx">toISOString</span><span class="p">;</span>
  <span class="nx">next</span><span class="p">();</span>
<span class="p">});</span>
</code></pre></div></div>

<p>Now you can use <code class="language-plaintext highlighter-rouge">req.requestTime</code> in any body of any request! There are many middlewares out there you don‚Äôt have to manually create them yourself. It will make your life and development much easier.</p>

<p>So as you grow your application, you wanna separate concerns. App.js then focuses mostly on middleware declarations using <code class="language-plaintext highlighter-rouge">.use()</code>. Also there should be a server.js file that deals with just starting the server and server configurations. Checkout such file in the <a href="https://github.com/fbohz/ybz-backend-node-express">YBZ repo</a>.</p>

<p><strong>The Importance of Middlewares in Express</strong></p>

<p>So the importance of express middlewares is that you can implement validations as middleware then it will apply every time it applies. For example here‚Äôs a function that will use the <code class="language-plaintext highlighter-rouge">params</code> middleware to check for ‚Äòid‚Äô and whether it exists. This will only fire if ‚Äòid‚Äô is on the params of the request.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// tour controller</span>
<span class="nx">exports</span><span class="p">.</span><span class="nx">checkId</span> <span class="o">=</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">id is </span><span class="dl">"</span><span class="p">,</span> <span class="nx">value</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span> <span class="o">*</span> <span class="mi">1</span> <span class="o">&gt;</span> <span class="nx">tours</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span>
    <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">404</span><span class="p">).</span><span class="nx">json</span><span class="p">({</span>
      <span class="na">status</span><span class="p">:</span> <span class="dl">"</span><span class="s2">fail</span><span class="dl">"</span><span class="p">,</span>
      <span class="na">message</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Invalid ID</span><span class="dl">"</span><span class="p">,</span>
    <span class="p">});</span>
  <span class="c1">// remember to call next() on middlewares</span>
  <span class="nx">next</span><span class="p">();</span>
<span class="p">};</span>

<span class="c1">// tour routes</span>
<span class="kd">const</span> <span class="p">{</span> <span class="nx">checkId</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">./tourController</span><span class="dl">"</span><span class="p">);</span>

<span class="nx">router</span><span class="p">.</span><span class="nx">param</span><span class="p">(</span><span class="dl">"</span><span class="s2">id</span><span class="dl">"</span><span class="p">,</span> <span class="nx">checkId</span><span class="p">);</span>
</code></pre></div></div>

<p>With this simple check we no longer have to include such validations on each route, it will hit anytime the id matches the middleware. This is the magic of Node.js enhanced by Express!</p>

<h2 id="bonus---node-environment-variables">BONUS - Node Environment Variables</h2>

<p>Node can run on development and production environments among others. You can run in a particular environment by doing for example on the terminal and starting your server as: <code class="language-plaintext highlighter-rouge">NODE_ENV=development node server.js</code>. This could be helpful if you use different db for development/production. You can also check environment variables with <code class="language-plaintext highlighter-rouge">process.env</code>.</p>

<p>Now the easiest way to define these variables and environments is to add them to a <code class="language-plaintext highlighter-rouge">config.env</code> file. To do this use a dotenv NPM package you can install as <code class="language-plaintext highlighter-rouge">npm i dotenv</code>. After you define your variables you can use them on server.js as this:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// top level code server.js</span>
<span class="kd">const</span> <span class="nx">dotenv</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">dotenv</span><span class="dl">"</span><span class="p">);</span>
<span class="c1">// read config.env and save as env variables</span>
<span class="nx">dotenv</span><span class="p">.</span><span class="nx">config</span><span class="p">({</span> <span class="na">path</span><span class="p">:</span> <span class="dl">"</span><span class="s2">./config.env</span><span class="dl">"</span> <span class="p">});</span>
</code></pre></div></div>

<h2 id="bonus-2---eslint-and-prettier-cheatsheet">BONUS 2 - ESLint and Prettier Cheatsheet</h2>

<p>Install this to use ESLint and prettier with cool config to make your Node life easier.</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">npm</span> <span class="n">i</span> <span class="n">eslint</span> <span class="n">prettier</span> <span class="n">eslint</span><span class="o">-</span><span class="n">config</span><span class="o">-</span><span class="n">prettier</span> <span class="n">eslint</span><span class="o">-</span><span class="n">plugin</span><span class="o">-</span><span class="n">prettier</span> <span class="n">eslint</span><span class="o">-</span><span class="n">plugin</span><span class="o">-</span><span class="n">jsx</span><span class="o">-</span><span class="n">a11y</span> <span class="n">eslint</span><span class="o">-</span><span class="n">plugin</span><span class="o">-</span><span class="n">react</span><span class="o">-</span><span class="n">hooks</span> <span class="n">eslint</span><span class="o">-</span><span class="n">plugin</span><span class="o">-</span><span class="n">node</span> <span class="n">eslint</span><span class="o">-</span><span class="n">plugin</span><span class="o">-</span><span class="n">import</span>  <span class="n">eslint</span><span class="o">-</span><span class="n">plugin</span><span class="o">-</span><span class="n">react</span> <span class="n">eslint</span><span class="o">-</span><span class="n">config</span><span class="o">-</span><span class="n">airbnb</span> <span class="c1">--save-dev</span>
</code></pre></div></div>

<p>In the repo you can check the <code class="language-plaintext highlighter-rouge">.eslintrc.json</code> and <code class="language-plaintext highlighter-rouge">.prettierrc</code> file configurations used.</p>

<p>So although we took some baby steps on this exploration, I think they were enough to prepare us to fly with express in no time üßôüèæ‚Äç‚ôÇÔ∏èüí´.</p>

<h2 id="continue-your-journey">Continue Your Journey</h2>

<ul>
  <li><a href="https://nodejs.org/en/docs/"><strong>Node Docs</strong></a>.</li>
  <li><a href="https://expressjs.com/"><strong>Express Docs</strong></a>.</li>
  <li><a href="https://expressjs.com/en/resources/middleware.html"><strong>Express Middleware list</strong></a>.</li>
  <li><a href="https://prettier.io/"><strong>Prettier</strong></a>.</li>
  <li><a href="https://eslint.org/docs/rules"><strong>ESLint</strong></a>.</li>
  <li><a href="https://graphql.org/graphql-js/running-an-express-graphql-server/"><strong>GraphQL on top of express server</strong></a>.</li>
  <li><a href="https://medium.com/@utkarshprakash/setting-up-graphql-server-with-nodejs-express-and-mongodb-d72fba13216"><strong>GraphQL + Express + MongoDB Tutorial</strong></a>.</li>
</ul>
:ET