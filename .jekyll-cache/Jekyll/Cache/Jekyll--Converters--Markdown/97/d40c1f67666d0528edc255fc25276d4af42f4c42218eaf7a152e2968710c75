I"@6<blockquote>
  <p>It might be common to think that software engineers don’t have to deal or worry about UI, since it is delegated to UX designers. However learning about CSS patterns such as Flexbox is crucial to becoming a more thorough developer and problem solve with a design/layout mindset.</p>
</blockquote>

<h1 id="learning-about-flexbox">Learning About Flexbox</h1>

<p>It might be common to think that software engineers don’t have to deal or worry about UI, since it is delegated to UX designers. However learning about CSS patterns such as Flexbox is crucial to becoming a more thorough developer and problem solve with a design/layout mindset.</p>

<p><strong>What Is Flexbox</strong></p>

<p>You can apply Flexbox to setup the initial layout of a website, app, and mobile application (with React Native). The first thing we need to do to start using Flexbox is to apply the following to the parent container:</p>

<p><code class="language-plaintext highlighter-rouge">display: flex</code></p>

<h2 id="flex-parent-container-properties">Flex Parent (Container) Properties</h2>

<p>Now lets imagine you have a container with 3 boxes:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"flex-container"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div&gt;</span>1<span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div&gt;</span>2<span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div&gt;</span>3<span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<p>In the container we could apply one of the following and each will have a different effect on the child:</p>

<ul>
  <li>flex-direction</li>
  <li>flex-wrap</li>
  <li>flex-flow</li>
  <li>justify-content</li>
  <li>align-items</li>
  <li>align-content</li>
</ul>

<p><strong>Flex Direction</strong></p>

<p>Lets say we’ll apply <code class="language-plaintext highlighter-rouge">flex-direction: column</code> what do we get?</p>

<p><img src="https://user-images.githubusercontent.com/15071636/85189215-6775a300-b272-11ea-8de6-02d230574e0a.png" alt="Screen Shot 2020-06-19 at 9 17 54 PM" /></p>

<p>So pretty much we decide if we want them left-right or right-left, top-bottom etc. These are your options:</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.container</span> <span class="p">{</span>
  <span class="nl">flex-direction</span><span class="p">:</span> <span class="n">row</span> <span class="err">|</span> <span class="n">row-reverse</span> 
  <span class="err">|</span> <span class="n">column</span> <span class="err">|</span> <span class="n">column-reverse</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>Flex Wrap</strong></p>

<p>By default flex will try to fit all items into a single line if you don’t want this you can change it:</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.container</span> <span class="p">{</span>
  <span class="nl">flex-wrap</span><span class="p">:</span> <span class="nb">nowrap</span> <span class="err">|</span> <span class="n">wrap</span> <span class="err">|</span> <span class="n">wrap-reverse</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>nowrap (default): all flex items will be on one line</li>
  <li>wrap: flex items will wrap onto multiple lines, from top to bottom.</li>
  <li>wrap-reverse: flex items will wrap onto multiple lines from bottom to top.</li>
</ul>

<p><strong>Flex Flow</strong></p>

<p>With flex flow we combine flex-wrap and flex-direction into one property for example <code class="language-plaintext highlighter-rouge">flex-flow: column wrap;</code>.</p>

<p><strong>Justify Content</strong></p>

<p>With justify-content we can align our items along the main axis. You can distribute extra space. Here are our options:</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.container</span> <span class="p">{</span>
  <span class="nl">justify-content</span><span class="p">:</span> <span class="n">flex-start</span> <span class="err">|</span> <span class="n">flex-end</span> 
  <span class="err">|</span> <span class="nb">center</span> <span class="err">|</span> <span class="n">space-between</span> <span class="err">|</span> <span class="n">space-around</span> 
  <span class="err">|</span> <span class="n">space-evenly</span> <span class="err">|</span> <span class="n">start</span> <span class="err">|</span> <span class="n">end</span> 
  <span class="err">|</span> <span class="nb">left</span> <span class="err">|</span> <span class="nb">right</span> <span class="p">...</span> <span class="err">+</span> <span class="n">safe</span> <span class="err">|</span> <span class="n">unsafe</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>For example we can display our items in the center with <code class="language-plaintext highlighter-rouge">justify-content: center;</code>:</p>

<p><img src="https://user-images.githubusercontent.com/15071636/85189316-97717600-b273-11ea-8cd9-150395753be7.png" alt="Screen Shot 2020-06-19 at 9 26 40 PM" /></p>

<p><strong>Align Items</strong></p>

<p>We use it with justify-content to align items. This more specifically with align-items on a cross axis of the current line, so perpendicular to main-axis. We could apply this:</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.container</span> <span class="p">{</span>
  <span class="nl">align-items</span><span class="p">:</span> <span class="n">stretch</span> <span class="err">|</span> <span class="n">flex-start</span> <span class="err">|</span> <span class="n">flex-end</span> 
  <span class="err">|</span> <span class="nb">center</span> <span class="err">|</span> <span class="nb">baseline</span> <span class="err">|</span> <span class="n">first</span> <span class="nb">baseline</span> 
  <span class="err">|</span> <span class="n">last</span> <span class="nb">baseline</span> <span class="err">|</span> <span class="n">start</span> <span class="err">|</span> <span class="n">end</span> <span class="err">|</span>
   <span class="n">self-start</span> <span class="err">|</span> <span class="n">self-end</span> <span class="err">+</span> <span class="p">...</span> <span class="n">safe</span> <span class="err">|</span> <span class="n">unsafe</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>Align Content</strong></p>

<p>With align-content you can align items along multiple lines:</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">align-content</span><span class="o">:</span> <span class="nt">flex-start</span> <span class="o">|</span> <span class="nt">flex-end</span> <span class="o">|</span> <span class="nt">center</span>
 <span class="o">|</span> <span class="nt">space-between</span> <span class="o">|</span> <span class="nt">space-around</span> <span class="o">|</span> <span class="nt">stretch</span>
</code></pre></div></div>

<p>If there’s only one line, this property will have no effect.</p>

<h2 id="flex-children-itemselements-properties">Flex Children (Items/Elements) Properties</h2>

<p>You can apply the following to child elements of the container:</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">order</span><span class="o">:</span> <span class="o">&lt;</span><span class="nt">integer</span><span class="o">&gt;;</span>
<span class="nt">flex-grow</span><span class="o">:</span> <span class="o">&lt;</span><span class="nt">number</span><span class="o">&gt;;</span> <span class="c">/* default 0 */</span>
<span class="nt">flex-shrink</span><span class="o">:</span> <span class="o">&lt;</span><span class="nt">number</span><span class="o">&gt;;</span> <span class="c">/* default 1 */</span>
<span class="nt">flex-basis</span><span class="o">:</span> <span class="o">&lt;</span><span class="nt">length</span><span class="o">&gt;</span> <span class="o">|</span> <span class="nt">auto</span><span class="o">;</span> <span class="c">/* default auto */</span>
<span class="nt">flex</span><span class="o">:</span> <span class="nt">none</span> <span class="o">|</span> <span class="o">[</span> <span class="o">&lt;</span><span class="s2">'flex-grow'</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="s2">'flex-shrink'</span><span class="o">&gt;?</span>
 <span class="o">||</span> <span class="o">&lt;</span><span class="s2">'flex-basis'</span><span class="o">&gt;</span> <span class="o">]</span>
<span class="nt">align-self</span><span class="o">:</span> <span class="nt">auto</span> <span class="o">|</span> <span class="nt">flex-start</span> <span class="o">|</span> <span class="nt">flex-end</span>
 <span class="o">|</span> <span class="nt">center</span> <span class="o">|</span> <span class="nt">baseline</span> <span class="o">|</span> <span class="nt">stretch</span><span class="o">;</span>
</code></pre></div></div>

<p><strong>Order</strong></p>

<p>With order you specify the order of the children elements. The default is 0.</p>

<p><strong>Flex Grow / Flex Shrink</strong></p>

<p>With flex-grow you can specify how many a specify item will grow compared to others. Default is 0. Consider this:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"flex-container"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">"flex-grow: 1"</span><span class="nt">&gt;</span>1<span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">"flex-grow: 1"</span><span class="nt">&gt;</span>2<span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">"flex-grow: 8"</span><span class="nt">&gt;</span>3<span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<p>What we get:</p>

<p><img src="https://user-images.githubusercontent.com/15071636/85189460-f5528d80-b274-11ea-8cff-9be118384ba1.png" alt="Screen Shot 2020-06-19 at 9 36 26 PM" /></p>

<p>Flex-shrink is kind of the opposite thus how it will shrink related to its sibling items. Default is 1.</p>

<p><strong>Flex Basis</strong></p>

<p>You can specify the initial length of an item. Default is auto.</p>

<p><strong>Flex</strong></p>

<p>With flex you can apply <code class="language-plaintext highlighter-rouge">flex-grow, flex-shrink, and flex-basis</code> at the same time. The second and third parameters are optional. It is <em>recommended</em> to use <code class="language-plaintext highlighter-rouge">flex</code> instead of the individual properties.</p>

<p><strong>Align Self</strong></p>

<p>Align self sets how the selected item will be aligned. It also overrides the align-items parent property.</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.item</span> <span class="p">{</span>
  <span class="nl">align-self</span><span class="p">:</span> <span class="nb">auto</span> <span class="err">|</span> <span class="n">flex-start</span> 
  <span class="err">|</span> <span class="n">flex-end</span> <span class="err">|</span> <span class="nb">center</span> <span class="err">|</span> <span class="nb">baseline</span> <span class="err">|</span> <span class="n">stretch</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Here we can align the third item in the middle of its parent container:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"flex-container"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div&gt;</span>1<span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div&gt;</span>2<span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">"align-self: center"</span><span class="nt">&gt;</span>3<span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div&gt;</span>4<span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<p>We then get:</p>

<p><img src="https://user-images.githubusercontent.com/15071636/85189784-99d5cf00-b277-11ea-8720-b1e4c18ff770.png" alt="Screen Shot 2020-06-19 at 9 55 21 PM" /></p>

<p><strong>Flex Tips</strong></p>

<ul>
  <li>For centering try <code class="language-plaintext highlighter-rouge">justify-content: center; align-items: center;</code>.</li>
  <li><code class="language-plaintext highlighter-rouge">float, clear, vertical-align</code> have no effect on a flex item.</li>
</ul>

<h2 id="resources">Resources</h2>

<ul>
  <li><a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/"><strong>Complete Guide to Flexbox</strong></a></li>
  <li><a href="https://yoksel.github.io/flex-cheatsheet/"><strong>Flex Cheatsheet</strong></a></li>
  <li><a href="https://www.w3schools.com/css/css3_flexbox.asp"><strong>W3 Schools Flexbox</strong></a></li>
  <li><a href="https://www.freecodecamp.org/news/css-flexbox-tips-and-tricks/"><strong>CSS Flexbox Tips and Tricks</strong></a></li>
  <li><a href="https://flexboxfroggy.com/"><strong>Flexbox Froggy: Learn Flexbox by Playing</strong></a></li>
</ul>
:ET