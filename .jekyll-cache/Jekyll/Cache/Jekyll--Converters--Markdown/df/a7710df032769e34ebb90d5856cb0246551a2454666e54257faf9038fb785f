I"éO<blockquote>
  <p>Today weâ€™ll discuss regarding the last piece of the puzzle on good problem solving in software engineering, namely algorithms. On this first chapter weâ€™ll talk about Recursion and Sorting Algorithms.</p>
</blockquote>

<h1 id="on-cs-algorithms-chapter-i">On CS Algorithms: Chapter I</h1>

<p>Today weâ€™ll discuss regarding the last piece of the puzzle on good problem solving in software engineering, namely algorithms. On this first chapter weâ€™ll talk about Recursion and Sorting Algorithms. These are mostly notes from articles and online courses Iâ€™ve taken. Enjoy!</p>

<h2 id="intro-to-algorithms-and-recursion-pattern">Intro To Algorithms and Recursion Pattern</h2>

<p>Remember: <code class="language-plaintext highlighter-rouge">DS + ALG = programs</code>:</p>
<ul>
  <li>A two line function is technically an algorithm.</li>
  <li>There are thousands of well established algorithm.</li>
  <li>There are important algorithms weâ€™ll learn.</li>
  <li>With good algorithms we can enhance our Big-O</li>
</ul>

<p><strong>What is Recursion?</strong></p>

<ul>
  <li>Itâ€™s more of a concept, than an algorithm</li>
  <li>Common topic in an interview.</li>
  <li>E.g. type <code class="language-plaintext highlighter-rouge">ls -R</code> on terminal in a folder: it will give you all files and folders.</li>
  <li><strong>Recursion is a function that refers to itself inside of the function</strong>. Sounds too philosophical? ðŸ¤¯</li>
</ul>

<p>It can be, recursive function can be easy as this:</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Caution: Stack Overflow</span>
<span class="kd">function</span><span class="p">(</span><span class="nx">inception</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">inception</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Recursion will be used in searching and sorting algorithms. DOM traversal on a website uses recursion. An object inside of an object you can use recursion.</p>

<p>Two problems of recursion</p>
<ul>
  <li>Difficult to understand at first.</li>
  <li><strong>Stack overflow</strong> also could happen. Self calling function could cause your function to ran out your memory. Infinite loops.</li>
  <li>A <strong>base case</strong> will help the recursive function to stop.</li>
</ul>

<h2 id="anatomy-of-recursion">Anatomy of Recursion</h2>

<p>Base case will help it stop. An example could be:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">counter</span> <span class="o">=</span> <span class="mi">0</span>
<span class="kd">function</span><span class="p">(</span><span class="nx">inception</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">counter</span> <span class="o">&gt;</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="dl">'</span><span class="s1">done</span><span class="dl">'</span>
    <span class="p">}</span>
    <span class="nx">counter</span><span class="o">++</span>
<span class="c1">// will ensure 'done' returned    </span>
    <span class="k">return</span> <span class="nx">inception</span><span class="p">()</span>
<span class="p">}</span>
<span class="nx">inception</span><span class="p">()</span>
</code></pre></div></div>

<p>Three rules to build recursion:</p>
<ol>
  <li>Identify the base case</li>
  <li>Identify the recursive case</li>
  <li>Get closer and closer and return when needed. <strong>Usually you have 2 returns</strong>.</li>
</ol>

<h3 id="recursion-exercise---factorial">Recursion Exercise - Factorial</h3>

<p>A factorial multiplies itself depending on number for example:
<code class="language-plaintext highlighter-rouge">5! = 5 * 4 * 3 * 2 * 1</code></p>

<p>You can solve this through looping or recursion. See below or click <a href="https://repl.it/@fbohz/BlogRecursionEg1#index.js">here</a>. Note both are <code class="language-plaintext highlighter-rouge">O(n)</code>.</p>

<iframe height="400px" width="100%" src="https://repl.it/@fbohz/BlogRecursionEg1?lite=true" scrolling="no" frameborder="no" allowtransparency="true" allowfullscreen="true" sandbox="allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals"></iframe>

<h3 id="recursion-exercise---fibonacci">Recursion Exercise - Fibonacci</h3>

<p>Fibonacci adds first two items equals third item. Again this one can be done either loops or recursive. See below or click <a href="https://repl.it/@fbohz/BlogRecursionEg2#index.js">here</a>.</p>

<iframe height="400px" width="100%" src="https://repl.it/@fbohz/BlogRecursionEg2?lite=true" scrolling="no" frameborder="no" allowtransparency="true" allowfullscreen="true" sandbox="allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals"></iframe>

<h2 id="recursion-vs-iteration">Recursion vs Iteration</h2>

<ul>
  <li><strong>Anything that can be done recursively can be done with a loop (iteratively)</strong></li>
  <li>You can go all life without recursion.</li>
  <li>Thoughts:</li>
  <li><strong>Recursion can keep your code DRY</strong></li>
  <li><strong>Recursion creates an extra memory footprint</strong> and stack overflow</li>
  <li>Takes time to learn.</li>
  <li><strong>So not always a good idea.</strong></li>
  <li><strong>When to use recursion</strong></li>
  <li>When you donâ€™t know how deep the data structure is.</li>
  <li>Useful for tree data structure.</li>
  <li>Traversing through trees and graphs, sorting through items.</li>
</ul>

<h2 id="recursion-tips">Recursion Tips:</h2>

<ul>
  <li>Every time <strong>using a tree or converting to a tree consider recursion</strong></li>
  <li>You see a lot of divide and conquer in recursive solutions like a phone-book. These divide and conquer usually have recursive solutions.</li>
  <li>Tail call optimization</li>
  <li>Allows recursion without increasing the call stack. Read <a href="https://2ality.com/2015/06/tail-call-optimization.html">here</a>.</li>
  <li>Great <a href="https://stackoverflow.com/questions/105838/real-world-examples-of-recursion">real world application example</a> of when to use recursion:</li>
</ul>

<p>Interview triggers:</p>
<ol>
  <li>A problem can be divided into small problems, smaller instances of those problems.</li>
  <li><strong>Each of these instances of problems are identical in nature</strong>. Calculations are same over and over</li>
  <li>If you solve smaller problems (leaf notes of tree) and you combine them, that solves problem at hand.</li>
</ol>

<p><strong>Conclusion</strong></p>
<ul>
  <li>Remember try to avoid stack overflow with recursion.</li>
  <li>Use recursion to make code DRY, but be careful with performance in recursion.</li>
  <li>Recursive although expensive, with graphs and sort can use recursion.</li>
</ul>

<h1 id="sorting">Sorting</h1>

<p>Sorting is very important for interviews. But, why you care about sorting if you have <code class="language-plaintext highlighter-rouge">sort()</code> in JS?</p>

<p><strong>Sorting is not a big deal with small input data</strong>. But as it grows it gets more complicated.</p>

<p>Examples:</p>
<ul>
  <li>Google needs to sort articles on a particular event in time</li>
  <li>Amazon needs to sort articles</li>
  <li>Netflix needs to show all movies, tv shows.</li>
</ul>

<p><strong>All these example cannot use built in sort methods. They need to create their own sort method</strong>.
<strong>Most scaled companies sort their data</strong>.</p>

<p>This topic is very important:</p>
<ul>
  <li>What sorting algorithm you can use depending on the problem.</li>
  <li>There are a lot of sorting algorithms. Most likely youâ€™ll never implement your own, except for a small example on an interview.</li>
  <li>The goal is to understand high level these sorting algorithms to talk intelligently on interviews.</li>
  <li>Key to learn as more companies grow, <strong>sorting and searching become more and more crucial</strong>.</li>
  <li>Weâ€™ll go through these sorts:
    <ul>
      <li>Easier to remember, might come up in interviews:</li>
      <li>Bubble Sort, Insertion Sort, Selection Sort</li>
      <li>More complex, more efficient sometimes:</li>
      <li>Merge Sort, Quick sort</li>
    </ul>
  </li>
</ul>

<h2 id="built-in-sort">Built-in <code class="language-plaintext highlighter-rouge">sort()</code></h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">basket</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">65</span><span class="p">,</span><span class="mi">34</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span>
<span class="kd">const</span> <span class="nx">sp</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">Ãºnico</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">Ã¡rbol</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">cosas</span><span class="dl">'</span><span class="p">]</span>

<span class="c1">// to implement sp sort you'll do this:</span>
<span class="nx">basket</span><span class="p">.</span><span class="nx">sort</span><span class="p">((</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">a</span> <span class="o">-</span> <span class="nx">b</span> 
<span class="p">})</span>
<span class="nx">spanish</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span>
    <span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">localCompare</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span>
<span class="p">})</span>
</code></pre></div></div>

<p>Try running line sort(). You might have surprise because JS converts to string. With JS each browser will use their own ECMAScript implementation so differences might come as well.</p>

<p>Read more <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort">here</a>.</p>

<h3 id="sorting-algorithms">Sorting Algorithms</h3>

<ul>
  <li>You donâ€™t need to write from scratch, more likely ever, but need to know about them.</li>
  <li>Most of the time talk about it, and implement it with frameworks.</li>
  <li><strong>Interviews, will ask you for sure.</strong></li>
  <li>There are Big O tradeoffs when using sorting algorithms.</li>
  <li><a href="https://www.toptal.com/developers/sorting-algorithms">Great learning resource</a>.</li>
</ul>

<h2 id="bubble-sort---do-not-use">Bubble Sort - DO NOT USE</h2>

<ul>
  <li>How would you bubble sort: 6,5,4,3,2?
    <ul>
      <li>Compare each one and swap them out. <strong>Bubble up the highest number</strong></li>
    </ul>
  </li>
  <li>A lot of comparison, and slow. Space complexity O(1) but time complexity is <code class="language-plaintext highlighter-rouge">O(n^2)</code> so slow.</li>
  <li>Probably <strong>not the best algorithm</strong></li>
</ul>

<p>Example Bubble Sort: Scroll until the end of this article.</p>

<h2 id="selection-sort---do-not-use">Selection Sort - DO NOT USE</h2>
<ul>
  <li>Scan list of items for smallest then swap to first position.
    <ul>
      <li>It also means a lot of passes to find the smallest item through the list.</li>
    </ul>
  </li>
  <li>Time complexity is <code class="language-plaintext highlighter-rouge">O(n^2)</code> and O(1) as space. So also <strong>not very efficient</strong>.</li>
</ul>

<p>Example Selection Sort: Scroll until the end of this article.</p>

<h2 id="insertion-sort">Insertion Sort</h2>
<ul>
  <li>Not most efficient, but <strong>it is efficient in some ways</strong>.</li>
  <li>If the list is almost sorted, it can give you O(n)</li>
  <li><strong>Works as comparing and inserting into the list</strong>. More like youâ€™ll do with your brain. Works well with small data set.</li>
</ul>

<p>Insertion Sort Example: Scroll until the end of this article.</p>

<p>Best case scenario is O(n) <strong>very fast</strong>. If your set is <strong>mostly sorted use insertion sort</strong>.</p>

<h2 id="merge-sort-and-on-log-n">Merge Sort and <code class="language-plaintext highlighter-rouge">O(n log n)</code></h2>

<ul>
  <li>This performs better than others.</li>
  <li><strong>Divide and conquer: Merge sort and quick sort use this conquer along with recursion</strong>.</li>
  <li>These <strong>donâ€™t have nested loops</strong>.</li>
  <li>This O(n log n) is because it is still compared, everything at least once, but it is not compared everything to everything.</li>
  <li>The list is divided until thereâ€™s 1 item per group.
    <ul>
      <li>This is building a <strong>reversed tree</strong>.</li>
      <li>These groups are compared until sorting is done.</li>
    </ul>
  </li>
  <li>Very efficient than most, but <em>*more space complexity</em> with <code class="language-plaintext highlighter-rouge">O(n)</code>.</li>
  <li>You probably wonâ€™t be asked to do merge sort by yourself.</li>
</ul>

<p>Merge sort is stable but very hard to implement for yourself. <a href="https://stackoverflow.com/questions/1517793/what-is-stability-in-sorting-algorithms-and-why-is-it-important">More about stability in sorting algorithms</a>.</p>

<p>Merge Sort example: Scroll until the end of this article.</p>

<h2 id="quick-sort">Quick Sort</h2>

<p>Also divide and conquer <code class="language-plaintext highlighter-rouge">O(n log n)</code>.</p>

<p>Uses pivoting technique. <strong>Pretty complex to understand.</strong></p>
<ul>
  <li>Picks random pivot, e.g. random value.
    <ul>
      <li>Compares it with all numbers less than pivot to left and higher to move to right.</li>
      <li>With pivot you have two lists and keep doing and breaking things down like a tree until everything is sorted and then combine.</li>
    </ul>
  </li>
  <li>How you pick pivot point? It depends.</li>
  <li>How will you code it? Pretty challenging.</li>
  <li>Quick sort is very useful. Space complexity is very good could better than merge sort O(log n) but in worst cases very bad O(n^2).</li>
  <li><strong>Selecting pivot is very important to avoid worst case</strong>.</li>
  <li>Quick sort is fastest on average, but can have bad consequences if you donâ€™t know how to use it. You can rely on merge or others if unsure.</li>
</ul>

<p><strong><a href="https://repl.it/@fbohz/quickSort">Quick sort example</a></strong>.</p>

<h2 id="which-sort-is-best">Which Sort is Best?</h2>

<p><strong>This can come in an interview, choose sorting sort based upon x case</strong>?</p>
<ul>
  <li>Insertion Sort can be used:
    <ul>
      <li>If you only have few items, small input, and already sorted.</li>
    </ul>
  </li>
  <li>Merge Sort (<strong>often used</strong>)
    <ul>
      <li>O(n log n) fast b/c of divide and conquer. Best fast and worst case is consistent.</li>
      <li>If youâ€™re worried about worst case scenarios use this one.</li>
      <li>If space is an issue, it can be very expensive as O(n)</li>
    </ul>
  </li>
  <li>Quick sort (<strong>often used</strong>):
    <ul>
      <li>Better than merge sort. Best space complexity and popular</li>
      <li>Downside is worst case which is bad.</li>
    </ul>
  </li>
  <li>Bubble Sort: <strong>never use it</strong>. Only for educational purposes.</li>
  <li>Selection Sort: <strong>never use it</strong>. Only for educational purposes.</li>
</ul>

<p>Others:</p>
<ul>
  <li>Heapsort: can be slower but merge/quick are preferred most cases.</li>
  <li>Bucket, Radix: will learn more.</li>
</ul>

<h2 id="other-sorts">Other Sorts:</h2>

<p>Can we beat <code class="language-plaintext highlighter-rouge">O(n log n)</code>? Mathematically, is impossible. Means we have to sort by comparison.</p>

<p>Tell me more about the other sorts:</p>
<ul>
  <li><a href="https://brilliant.org/wiki/heap-sort/">Heap sort</a>.</li>
  <li><a href="https://stackoverflow.com/questions/2467751/quicksort-vs-heapsort">Quick vs Heap sort comparison</a>.</li>
</ul>

<p><strong>Non Comparison Sorts</strong>:</p>
<ul>
  <li>Radix sort and Counting Sort use this.</li>
  <li>Non comparison uses the way that number and data are stored on computers and take advantage of that.</li>
  <li>This <em>only work with numbers</em>, specifically integers in a specific range.</li>
  <li><em>Doesnâ€™t work</em> on other data universally.</li>
  <li>So you could use it with numbers.</li>
</ul>

<p><strong>Resources</strong>:</p>
<ul>
  <li><a href="https://brilliant.org/wiki/radix-sort/">Radix Sort</a>.</li>
  <li><a href="https://www.cs.usfca.edu/~galles/visualization/RadixSort.html">Radix Sort Animation</a>.</li>
  <li><a href="https://brilliant.org/wiki/counting-sort/">Counting Sort</a>.</li>
  <li><a href="https://www.cs.usfca.edu/~galles/visualization/CountingSort.html">Counting Sort Animation</a></li>
</ul>

<h2 id="common-sorting-interview-questions">Common Sorting Interview Questions</h2>

<ol>
  <li>Sort 10 schools around your house by distance:
    <ul>
      <li>insertion sort. Really fast and easy to code with good space. Schools could be presorted.</li>
    </ul>
  </li>
  <li>eBay sorts listings by the current Bid amount:
    <ul>
      <li>radix or counting sort. Because are numbers and set amount.</li>
    </ul>
  </li>
  <li>Sort scores on ESPN
    <ul>
      <li>Quick sort. Since it varies with decimals etc. Take advantage of better space complexity.</li>
    </ul>
  </li>
  <li>Massive database (canâ€™t fit all into memory) needs to sort through past yearâ€™s user data
    <ul>
      <li>Merge Sort. Worried about performance b/c big data so no Quick sort.</li>
    </ul>
  </li>
  <li>Almost sorted Udemy review data needs to update and add 2 new reviews
    <ul>
      <li>Insertion Sort. Assuming prev data is already sorted and adding 2 new reviews will take less.</li>
    </ul>
  </li>
  <li>Temperature Records for the past 50 years in Canada
    <ul>
      <li>radix or counting sort IF no decimals</li>
      <li>Quick sort IF decimal places</li>
    </ul>
  </li>
  <li>Large user name database needs to be sorted. Data is very random.
    <ul>
      <li>Quick / Merge sort. Not a lot of info here. If not worried on worst case.</li>
    </ul>
  </li>
  <li>You want to teach sorting
    <ul>
      <li>Bubble sort, Selection sort</li>
    </ul>
  </li>
</ol>

<h2 id="sorting-review">Sorting Review</h2>

<ul>
  <li>JS included <code class="language-plaintext highlighter-rouge">.sort()</code>, depending on its engine might use merge / quick or insertion sort for smaller arrays. So depends on engine used by browser.</li>
  <li>Quick Sort: average space performance concern.</li>
  <li>Merge sort: more stable always gives same results in order if two items are same.</li>
  <li>In real life you wonâ€™t use others unless small (insertion).</li>
  <li><strong>In interview TIP</strong>:
    <ul>
      <li>You can say you can use implement a bubble sort b/c time constrain.</li>
      <li>OR say will implement Merge sort and explain.</li>
    </ul>
  </li>
  <li><a href="https://www.youtube.com/user/AlgoRythmics/videos"><strong>Dancing Algorithms (Videos)</strong></a>.</li>
</ul>

<h2 id="sorting-algorithms-examples">Sorting Algorithms Examples</h2>

<p>Wanna see the code in action? Check them out below or click <a href="https://repl.it/@fbohz/BlogSortingAlgorithmsExamples#index.js">here</a>.</p>

<iframe height="400px" width="100%" src="https://repl.it/@fbohz/BlogSortingAlgorithmsExamples?lite=true" scrolling="no" frameborder="no" allowtransparency="true" allowfullscreen="true" sandbox="allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals"></iframe>
:ET