I"ï<blockquote>
  <p>Digging Deeper into SD</p>
</blockquote>

<p><strong>Note</strong>: This article is somewhat of a continuation of the <a href="http://fbohz.com/sd_basics1"><strong>last blog</strong></a> the basics of Systems Design (SD). The main difference is that on this article Iâ€™ll use <strong>examples of other SDs</strong> to explain the concepts better.</p>

<h2 id="digging-deeper-high-level-system-design-and-rest-api">Digging Deeper: High Level System Design and REST API</h2>

<p>After we got some capacity estimates, now it is worth coming up with a basic high level design of the system and a Entity Relationship Diagram (ERD).</p>

<p>While I wonâ€™t go into detail, here you can find an ERD and high level SD design examples:</p>

<p><img src="https://user-images.githubusercontent.com/15071636/80003020-073ace80-8486-11ea-8223-b1a4f67ce7ce.png" alt="ERD" /></p>

<p><img src="https://user-images.githubusercontent.com/15071636/80003150-34877c80-8486-11ea-9d3f-6b5b37041589.png" alt="high level SD design" /></p>

<p>After this is done you can come up with your systems <strong>API endpoints</strong>. It is recommended using a REST API. Hereâ€™s an example of a twitter API:</p>

<p><code class="highlighter-rouge">tweet(api_dev_key, tweet_data, tweet_location, user_location)</code></p>

<p><em>Sample API Parameters</em>:</p>
<ul>
  <li>api_dev_key (string)</li>
  <li>tweet_data (string)</li>
  <li>tweet_location (string)</li>
  <li>user_location (string)</li>
</ul>

<p><em>Sample API Returns</em>: (string)</p>

<p>Here think about any <strong>appropriate HTTP error(s)</strong> returned when accessing the API. Maybe a NotFound 404 or 403 (forbidden) if <code class="highlighter-rouge">api_dev_key</code> is invalid?</p>

<h2 id="component-design">Component Design</h2>

<p>The component design part can be the most complex part and is the one that talks about the scalability of our system.</p>

<p>Thereâ€™s a concept called <strong>CAP Theorem</strong> that states that you cannot balance all this these characteristics (<em>Consistency, Availability, and Partition</em>) and youâ€™ll have to include tradeoffs in your design.</p>

<p>Example: Shortening URL. Long URL hard to remember and short URL chances of collision.</p>

<p>So in what part would you focus your design? Consistency, availability, portioning, and/or performance? What part(s) are important, why?</p>

<p>Lets now drill down into our <strong>component design</strong>:</p>
<ul>
  <li>Come up with a <em>workflow</em> of the system. Think about <strong>services</strong> in charge of making workflow efficient.</li>
  <li>Database schema:
    <ul>
      <li>Atomicity, Consistency, Isolation and Durability (ACID) if Relational Database Systems (RDBS).</li>
      <li>Think object / file system storage for images (e.g. Hadoop HDFS, AWS S3 ) and RDBS (MySQL) for metadata / info.</li>
    </ul>
  </li>
  <li>Expand your SD and include Algorithms / Services:
    <ul>
      <li><em>Horizontal vs. Vertical Scaling</em>: Horizontal scaling means that you scale by adding more servers into your pool of resources whereas vertical scaling means that you scale by adding more power (CPU, RAM, Storage, etc.) to an existing server. Vertical scaling might imply downtime and comes with limit.
        <ul>
          <li>Good examples of horizontal scaling are Cassandra and MongoDB. Vertical is MySQL.</li>
        </ul>
      </li>
      <li>Talk about how the application layer (logic) communicates storage layer (store / retrieve data).</li>
      <li>Assess data size per DB table.</li>
      <li><em>Data Partitioning/Distribution</em> (e.g data sharding) and replication. Think about horizontal vs vertical partitioning
        <ul>
          <li>Horizontal: put different rows in different tables. E.g. zip codes less than 10000 stored in x.</li>
          <li>Vertical: store features/resources with each other. Can be good if resource (e.g. photos) heavy.</li>
        </ul>
      </li>
      <li>Think about Reliability vs Redundancy.</li>
      <li>Answer this: <strong>How your system handles success and failure cases?</strong>
        <ul>
          <li>E.g. have standby DB as replica avoid single point of failure. So have secondary backup servers. On read traffic? write, both?</li>
        </ul>
      </li>
      <li>Divide read and write storage in different servers?</li>
    </ul>
  </li>
</ul>

<h3 id="load-balancers-lb-cache-and-telemetry">Load Balancers (LB), Cache and Telemetry</h3>

<p><strong>Load Balancers</strong></p>

<p>With Load balancers you can effectively distribute incoming network traffic across a group of  servers. When a new server is added to the group, the load balancer automatically starts to send requests to it.</p>

<p>LB reduces individual server load and <strong>prevents single point of failure</strong>, thus improves application availability and responsiveness. If failure LB can redirect to next available healthy server.</p>

<p><em>E.g. messaging app</em>: LB in front of chat servers. The LB can map each userId to a server that holds the connection for each user and then direct such request to that server.</p>

<p>Some LB strategies:</p>
<ul>
  <li><em>Round Robin</em>: distribute evenly across all servers, but this wonâ€™t take server load.</li>
  <li><em>More intelligent LB</em>: can query servers about their load and adjust traffic based upon how they are doing.</li>
  <li>You can also have <strong>passive and active</strong> LBs to prevent single point of failure in LB as well.</li>
</ul>

<p><strong>Cache</strong></p>

<p>Cache is short term for memory. Takes advantage that recently requested data might be asked again so stored locally. Cache is good for quick access to data. CDNs use cache since as they serve content if locally available.</p>

<p>Some cache strategies:</p>
<ul>
  <li><em>80/20 rule</em>: E.g try caching 20% of daily read volume of photos and metadata.</li>
  <li><em>Least recently used method LRU</em>: Or latest data. So it discards the least viewed first. This is a cache eviction policy.</li>
  <li>Read up on <em>Memcaching</em> and <em>Redis</em> as strategies for managing your caching system.</li>
</ul>

<p><em>Note:</em> If the data is modified in the database, then it should be <strong>invalidated</strong> in the cache as this could cause inconsistent app behavior.</p>

<p><strong>Telemetry</strong></p>

<p>How will you monitor for <em>peaks</em>, <em>Daily Active Users (DAU)</em> and <em>average latency</em>. Thinking about this will further prepare your app to scale even further and reduce failure chances.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Designing distributed systems it indeed includes a lot of factors and there are many tradeoffs to consider. However it could also be a fun and creative exercise to do.</p>

<p>Hopefully you found this SD exploration useful!</p>
:ET