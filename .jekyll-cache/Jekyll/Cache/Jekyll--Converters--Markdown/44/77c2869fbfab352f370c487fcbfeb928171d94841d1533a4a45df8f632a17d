I"‡<blockquote>
  <p>You‚Äôve got this! üëäüèº</p>
</blockquote>

<h1 id="beating-the-technical-interview">Beating The Technical Interview</h1>

<p>Last week (<strong>link</strong>) I shared my answer to a classical interview question from Facebook and my take on it using JavaScript. Today I‚Äôll talk about some interviewing tips when tackling with such technical questions!</p>

<h2 id="what-to-expect">What To Expect</h2>

<p>When called for an interview, you can expect one (or a combination) of the following formats:</p>

<ul>
  <li>Coding challenges
    <ul>
      <li>Week long coding (or data) project</li>
      <li>Timed technical assessment</li>
      <li>HackerRank or Codility challenge</li>
      <li>Data science case study</li>
    </ul>
  </li>
  <li>Technical phone screens
    <ul>
      <li>Trivia</li>
      <li>Pair-programming</li>
    </ul>
  </li>
  <li>In-person technical interviews
    <ul>
      <li>Trivia</li>
      <li>White-boarding</li>
      <li>Pair-programming</li>
    </ul>
  </li>
</ul>

<p>Be also prepared for common questions such as:</p>

<ul>
  <li>What is your understanding of <em>X_ROLE</em>?</li>
  <li>Describe your ideal day at work?</li>
  <li>Tell me about yourself.</li>
  <li>Why do you think you are great fit for <em>X_ROLE</em>?</li>
  <li>Share your experience with <em>X_TECHNOLOGY_POSTED_ON_YOUR_RESUME</em>.</li>
</ul>

<p>Then, make sure you <em>are prepared</em></p>

<ul>
  <li>Know the structure / time-length of the interview.
    <ul>
      <li>Know if your interview is divided in x parts and how long is each part.</li>
    </ul>
  </li>
  <li>Know the position you‚Äôre interviewing for.</li>
  <li>Research about the company</li>
  <li>Prepare a list of study materials. Include videos, articles, courses etc.</li>
</ul>

<p>Practice, practice, practice! Use HackerRank, LeetCode etc.</p>

<h2 id="the-flow-follow-it-and-you-will-cruise-the-interview">The Flow: Follow It and You Will Cruise the Interview.</h2>

<p>As you follow the flow below, sometimes we‚Äôll refer to my previous blog and the example coding challenge. So refer to it you need a refresher.</p>

<p><strong>Ask Questions</strong></p>

<ul>
  <li>Any restrictions? Any additional info I need?</li>
  <li>What data structure, is it an array, object?</li>
  <li>Is data in sorted? Are there duplicates?</li>
  <li>Are you getting one data structure or two?</li>
  <li><strong>Repeat Questions</strong></li>
</ul>

<p><strong>Talk the Solution</strong></p>

<ul>
  <li>You can diagram an example data with as much info as possible.
    <ul>
      <li>Depict example in a more visual way. Here e.g line with years.</li>
    </ul>
  </li>
  <li>Come up with brute force <em>DON‚ÄôT CODE YET</em>.
    <ul>
      <li>Go through all years, find alive and get highest population</li>
      <li>Get min birth year and max death year. What‚Äôs Big-O? O(N).</li>
      <li>Have extra counter for number of peopleAlive ..etc</li>
    </ul>
  </li>
</ul>

<p><strong>Brute force</strong></p>

<ul>
  <li>State brute force out-loud then code.
    <ul>
      <li>Ask clarifying questions what if X, what do I return?</li>
      <li>Think about <em>unnecessary work</em>. E.g. do you need to check death year?
        <ul>
          <li>Death decrements population. Birth adds population.</li>
          <li>Ask interviewer if they die that year does the death count that same year or following?</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Think about your data structure:
    <ul>
      <li>A table with years:</li>
      <li>E.g. 1750:1..etc.</li>
      <li>Need your min and max birth year since birth is what increments.</li>
    </ul>
  </li>
</ul>

<p><strong>Refine solution with style</strong></p>

<ul>
  <li><em>Modularize code</em>
    <ul>
      <li>Each code one function.</li>
      <li>It helps you focus on the <em>most interesting things to write</em></li>
      <li>If you modularize you don‚Äôt have to write all code.</li>
      <li>As you code:
        <ul>
          <li><em>Talk out loud</em> what each function is doing.</li>
          <li>Test code.</li>
          <li>Check for any math.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Yes, <em>test</em> your code. Start with small test cases, then throw larger cases.</li>
</ul>

<p><strong>Repeat after me</strong>: <em>a solution, albeit brute force solution, *is better than no solution</em>.</p>

<h2 id="ko-reminders">K.O. Reminders</h2>

<ol>
  <li>Listen, ask questions. <strong>Look for clues</strong>.</li>
  <li>Draw and example. Big and with no special cases.</li>
  <li>Create (<em>don‚Äôt code</em>) a descriptive solution. Walk through example before coding. State <strong>Brute force algorithm</strong>, if you feel you can do better than brute-force do the latter if not do brute-force. Again, a solution, is better than no solution.</li>
  <li><strong>State Run-Time, Big-O</strong></li>
  <li><strong>Solidify your understanding of algorithm</strong></li>
  <li>Code and optimize as needed.</li>
  <li>Modularize as much as possible.</li>
  <li>Test your code. Simple test cases, then bigger test cases.</li>
</ol>

<h2 id="one-last-thing">One Last Thing‚Ä¶</h2>

<ul>
  <li>Practice solving problems <strong>without a text editor</strong> and with a <strong>time limit</strong>.</li>
  <li>Mock interview with a friend.</li>
  <li>Brush up on things you don‚Äôt know.</li>
  <li>Ask for clarifying questions</li>
  <li><strong>Focus on getting a working solution</strong>. Done is better than perfect.</li>
  <li>You <strong>won‚Äôt know all the answers</strong>
    <ul>
      <li>Don‚Äôt be afraid of say ‚ÄòI don‚Äôt know‚Äô.</li>
      <li><strong>Make an educated guess</strong>.</li>
    </ul>
  </li>
  <li>If you can, prepare your own questions ahead of time.</li>
</ul>

<p>You‚Äôve got this! üëäüèº</p>
:ET