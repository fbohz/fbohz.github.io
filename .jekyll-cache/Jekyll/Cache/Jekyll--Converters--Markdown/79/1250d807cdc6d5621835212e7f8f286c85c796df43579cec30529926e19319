I"U2<blockquote>
  <p>MongoDB is a NoSQL database…Each database can have one or more <em>collection</em>. What in RDBS are tables. Each collection can have one or more data structures or single entity called <em>document</em>, like table rows in RDBS.</p>
</blockquote>

<h1 id="mongodb---a-sweet-database-">MongoDB - A Sweet Database 🥭</h1>

<p>MongoDB is a NoSQL database, compared to relational databases such as MySQL. In the latest reincarnation of our Yijing Ball-Z (YBZ) and <a href="http://fbohz.com/html5_games/retro_snake.html">Snake HTML5 Game</a>, we implemented Mongo.DB/Mongoose on top of Express. So feel free to refer to the <a href="https://github.com/fbohz/ybz-backend-node-express">Mongo.DB YBZ Repository</a> and <a href="https://github.com/fbohz/snake-game-node-backend">Snake Node Backend</a> as you read along.</p>

<p>In MongoDB:</p>

<ul>
  <li>Each database can have one or more <em>collection</em>. What in RDBS are tables.</li>
  <li>Each collection can have one or more data structures or single entity called <em>document</em>, like table rows in RDBS.</li>
</ul>

<p>MongoDB is defined more specifically as:</p>

<p><img src="https://user-images.githubusercontent.com/15071636/86502577-4c268f80-bd6a-11ea-82e9-b4149a3bb40f.png" alt="Screen Shot 2020-07-03 at 8 17 39 PM" /></p>

<p>MongoDB uses as data structure like JSON called <em>BSON</em>. BSON is typed so documents are typed. Meaning all values <em>have a data type</em>, like string, boolean, number. All MongoDB documents are typed as well. With MongoDB you can have multiple values in one field, unlike RDBS. You can also have embedded documents. BSON documents have a limit on size as well.</p>

<p><em>Embedding/Denormalizing</em>: Including related data into a single document. It allows for quicker access and easier data models (better performance). But it’s not always the best solution. Opposite is normalization in RDBS, which involves creating new tables, joining them.</p>

<p><strong>Installing Using MongoDB</strong></p>

<p>You can install locally MongoDB community server or use Atlas version in the cloud. After installing lets say locally you can create a new db, just run the shell by doing <code class="highlighter-rouge">mongod</code>, starting mongo shell on a new tab with just <code class="highlighter-rouge">mongo</code> and then doing <code class="highlighter-rouge">use dbName</code>. You can create a collection by doing this:</p>

<p><code class="highlighter-rouge">db.tours.insertOne({name: "Test Tour", price: 297})</code></p>

<p>Note you refer to your current database as <code class="highlighter-rouge">db</code> even though you named your database differently. You can refer to newly created document as such:</p>

<p><code class="highlighter-rouge">db.tours.find()</code></p>

<p>MongoDB automatically creates unique ids for documents created. You can show databases available and collections by doing either <code class="highlighter-rouge">show dbs</code> or <code class="highlighter-rouge">show collection</code>.</p>

<p>You can also insert many documents just by doing for example <code class="highlighter-rouge">db.tours.insertMany([{},{}])</code>. You can also have different fields in different documents. So no limitation on fields as could be with RDBS.</p>

<p>If for some reasons you have issues with the running mongod process you can force stop it by doing <code class="highlighter-rouge">sudo killall mongod</code>.</p>

<h2 id="crud-with-mongodb">CRUD with MongoDB</h2>

<p><strong>Reading</strong></p>

<p>We already completed the C of CRUD by creating documents. Below are some reading/querying operators.<code class="highlighter-rouge">find()</code>: You can also pass a filter object. E.g. <code class="highlighter-rouge">db.tours.find({difficulty: "easy"})</code></p>

<p>You can make even more complex searches with <em>query operators</em>. Query operators start with an <code class="highlighter-rouge">$</code>, for example less than or equal is <code class="highlighter-rouge">$lte</code>. E.g. <code class="highlighter-rouge">db.tours.find({price {$lte: 500}})</code>.</p>

<p>You can also have two search criteria. E.g <code class="highlighter-rouge">db.tours.find({price {$lt: 500}, rating: {$gte: 4.8}})</code>. Here <code class="highlighter-rouge">gte</code> is greater than or equal and <code class="highlighter-rouge">lt</code> is simply less than.</p>

<p>Or queries can be performed as with <code class="highlighter-rouge">$or</code>. E.g <code class="highlighter-rouge">db.tours.find($or: [{price {$lt: 500}, rating: {$gte: 4.8}}])</code>. If you want to show only one field, e.g. name only you can do <code class="highlighter-rouge">db.tours.find({difficulty: "easy"}, {name: 1})</code>.</p>

<p>You’re starting to see how in MongoDB everything works with objects!</p>

<p><strong>Updating</strong></p>

<p>Similar to insertOne, insertMany we can do to update for example <code class="highlighter-rouge">db.tours.updateOne({name: "Test Name"}, {$set: {price: 499}})</code>. As you can see first you’re like querying for the document then you update it. We use the <code class="highlighter-rouge">$set</code> operator and because we use insertOne if many matches only the first match is updated.</p>

<p>To update more than one document if we expect multiple matches we can do <code class="highlighter-rouge">db.tours.UpdateMany({price {$lt: 500}, rating: {$gte: 4.8}}, {$set {premium: true}})</code>.</p>

<p><strong>Delete</strong></p>

<p>Delete is straightforward and we have <code class="highlighter-rouge">deleteOne</code> and <code class="highlighter-rouge">deleteMany</code>. For example: <code class="highlighter-rouge">db.tours.deleteMany({rating: {$lt: 4.8}})</code>. To delete <em>all</em> documents in a collection you just pass an empty object as this <code class="highlighter-rouge">db.tours.deleteMany({})</code>.</p>

<h2 id="bonus-using-the-mongoose-library">Bonus: Using the Mongoose Library</h2>

<p>You can install with <code class="highlighter-rouge">npm i mongoose</code>. The relationship between MongoDB and Mongoose is similar as to that of Node.js and Express, so it a level up abstraction higher. The Object Data Modeling (ODM) it uses it is just a way to talk to the database. Mongoose allows for for rapid development. It also allows for schemas to model data, relationships, easy validation, query API and other middleware.</p>

<p>In Mongoose we have the schema and the model. The <em>schema</em> is where the data is modeled, data structure is described, with default values and validation. The Mongoose <em>model</em> is a wrapper for the schema, which provides an interface to make CRUD operations on the database.</p>

<p><strong>Creating a Schema and Model in Mongoose</strong></p>

<p>Mongoose is about models. We create these models as blueprints for our db, in order to creates objects. In order to create a model we need a schema. In the most basic sense we can define our schema as such:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">tourSchema</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">Schema</span><span class="p">({</span>
  <span class="na">name</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span>
  <span class="na">rating</span><span class="p">:</span> <span class="nb">Number</span><span class="p">,</span>
  <span class="na">price</span><span class="p">:</span> <span class="nb">Number</span><span class="p">,</span>
<span class="p">});</span>
</code></pre></div></div>

<p>We can refine it by adding some validations.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">tourSchema</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">Schema</span><span class="p">({</span>
  <span class="na">name</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">type</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span>
    <span class="na">required</span><span class="p">:</span> <span class="p">[</span><span class="kc">true</span><span class="p">,</span> <span class="dl">"</span><span class="s2">must have name</span><span class="dl">"</span><span class="p">],</span>
    <span class="na">unique</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="p">},</span>
  <span class="na">rating</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">type</span><span class="p">:</span> <span class="nb">Number</span><span class="p">,</span>
    <span class="na">default</span><span class="p">:</span> <span class="mf">4.5</span><span class="p">,</span>
  <span class="p">},</span>
  <span class="na">price</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">type</span><span class="p">:</span> <span class="nb">Number</span><span class="p">,</span>
    <span class="na">required</span><span class="p">:</span> <span class="p">[</span><span class="kc">true</span><span class="p">,</span> <span class="dl">"</span><span class="s2">must have price</span><span class="dl">"</span><span class="p">],</span>
  <span class="p">},</span>
<span class="p">});</span>
</code></pre></div></div>

<p>Now we can create our model. Always remember models are capitalized in mongoose.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">Tour</span> <span class="o">=</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">model</span><span class="p">(</span><span class="dl">"</span><span class="s2">Tour</span><span class="dl">"</span><span class="p">,</span> <span class="nx">tourSchema</span><span class="p">);</span>
</code></pre></div></div>

<p><strong>Testing Our Model: Creating Documents</strong></p>

<p>We can create new documents based upon the model we created.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">testTour</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Tour</span><span class="p">({</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Magic Monquira</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">rating</span><span class="p">:</span> <span class="mf">4.7</span><span class="p">,</span>
  <span class="na">price</span><span class="p">:</span> <span class="mi">49</span><span class="p">,</span>
<span class="p">});</span>
</code></pre></div></div>

<p>We can now save using <code class="highlighter-rouge">.save()</code> which produces a promise we can consume as well. The result value of the promise is a document.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">testTour</span>
  <span class="p">.</span><span class="nx">save</span><span class="p">()</span>
  <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">doc</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">doc</span><span class="p">);</span>
  <span class="p">})</span>
  <span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">err</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">ERROR: </span><span class="dl">"</span><span class="p">,</span> <span class="nx">err</span><span class="p">));</span>
</code></pre></div></div>

<p>Now you can check your db using the MongoDB Atlas or Compass interface and there you go you just used Mongoose to save to our MongoDB database, pretty easy right from our code!</p>

<h2 id="level-up--readings">Level Up 🍄 Readings</h2>

<ul>
  <li><a href="https://www.mongodb.com/try/download/community"><strong>Mongo DB Community Server</strong></a></li>
  <li>You can install <a href="https://www.mongodb.com/products/compass"><strong>Compass App</strong></a> to make easy CRUD Operators and with a nice Graphical interface.</li>
  <li><a href="https://mongoosejs.com/docs/api.html"><strong>Mongoose Docs</strong></a>.</li>
  <li><a href="https://mongoosejs.com/docs/queries.html"><strong>Mongoose Queries</strong></a>.</li>
</ul>
:ET