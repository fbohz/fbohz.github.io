I"—B<blockquote>
  <p>Async/Await was introduced recently. In order to use async/await we need to use mark functions as <code class="language-plaintext highlighter-rouge">async</code> functions. Async functions return a promise and we can use one or more await functions.</p>
</blockquote>

<h1 id="solving-callback-hell---js-promises-and-async-await-in-nodejs">Solving Callback Hellüòà - JS Promises and Async-Await in Node.js</h1>

<p>Last week we went through the baby steps involved in Node.js and setting up a Express server. Now we left a question unanswered, remember <em>callback hell</em> in Node.js?</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">fs</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">superagent</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">superagent</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">__dirname</span><span class="p">}</span><span class="s2">/dog.txt`</span><span class="p">,</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span><span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
   <span class="nx">superagent</span>
  <span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="s2">`https://dog.ceo/api/breed/</span><span class="p">${</span><span class="nx">data</span><span class="p">}</span><span class="s2">/images/random`</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">end</span><span class="p">((</span><span class="nx">err</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="k">return</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nx">message</span><span class="p">)</span>

      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">res</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>

      <span class="nx">fs</span><span class="p">.</span><span class="nx">writeFile</span><span class="p">(</span><span class="dl">'</span><span class="s1">dog-img.txt</span><span class="dl">'</span><span class="p">,</span> <span class="nx">res</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">message</span><span class="p">,</span><span class="nx">err</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Dog Image Saved to File</span><span class="dl">"</span><span class="p">)</span>
      <span class="p">});</span>
  <span class="p">})</span>
<span class="p">})</span> 
 
</code></pre></div></div>
<p>Note superagent is a NPM package we use to use APIs such as the Dog CEO API above.</p>

<p>But note how here we ended up with callbacks inside of callbacks. This makes code messy and difficult to understand!</p>

<p><strong>Saving Callback Hell with Promises</strong></p>

<p>We can implement and consume promises easily. It implements a future value we are expected to receive in the future. Above <code class="language-plaintext highlighter-rouge">.get()</code> returns a promise so we can use it. To do that we use the <code class="language-plaintext highlighter-rouge">.then()</code> method:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">__dirname</span><span class="p">}</span><span class="s2">/dog.txt`</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">data</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Breed: </span><span class="p">${</span><span class="nx">data</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">superagent</span>
    <span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="s2">`https://dog.ceo/api/breed/</span><span class="p">${</span><span class="nx">data</span><span class="p">}</span><span class="s2">/images/random`</span><span class="p">);</span>
  <span class="p">})</span>
  <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">res</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">res</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
    <span class="nx">fs</span><span class="p">.</span><span class="nx">writeFile</span><span class="p">(</span><span class="dl">'</span><span class="s1">dog-img.txt</span><span class="dl">'</span><span class="p">,</span> <span class="nx">res</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
  <span class="p">})</span>
  <span class="p">.</span><span class="nx">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Dog image saved to file!</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">})</span>
  <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">err</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
  <span class="p">});</span>

</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">.then</code> only handles fulfilled promises, <code class="language-plaintext highlighter-rouge">.catch</code> handles when error. Here we can see it looks much better and we‚Äôre not nesting callbacks! However we still have callbacks function so we can make it event better üòè.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">const</span> <span class="nx">readFilePromise</span> <span class="o">=</span> <span class="nx">file</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="nx">reject</span><span class="p">(</span><span class="dl">'</span><span class="s1">File not found üò¢</span><span class="dl">'</span><span class="p">);</span>
      <span class="nx">resolve</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
    <span class="p">});</span>
  <span class="p">});</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">writeFilePromise</span> <span class="o">=</span> <span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">fs</span><span class="p">.</span><span class="nx">writeFile</span><span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">err</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="nx">reject</span><span class="p">(</span><span class="dl">'</span><span class="s1">File not found üò¢</span><span class="dl">'</span><span class="p">);</span>
      <span class="nx">resolve</span><span class="p">(</span><span class="dl">'</span><span class="s1">success</span><span class="dl">'</span><span class="p">);</span>
    <span class="p">});</span>
  <span class="p">});</span>
<span class="p">};</span>

</code></pre></div></div>

<p>The Promise constructor takes an executer function with resolve and reject as arguments. Then here just modify the <code class="language-plaintext highlighter-rouge">fs.readFile</code>, <code class="language-plaintext highlighter-rouge">fs.writeFile</code> to be <code class="language-plaintext highlighter-rouge">readFilePromise()</code>, <code class="language-plaintext highlighter-rouge">writeFilePromise()</code> with the file name and looks much better. So with that we solve and have less callbacks inside of callbacks.</p>

<p>Remember in order to use <code class="language-plaintext highlighter-rouge">.then()</code> we need to make sure code returns a promise!</p>

<p><strong>Using Promises with Async / Await</strong></p>

<p>Async/Await was introduced recently. In order to use async/await we need to use mark functions as <code class="language-plaintext highlighter-rouge">async</code> functions. Async functions return a promise and we can use one or more await functions.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">getDogPic</span> <span class="o">=</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">data</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">readFilePromise</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">__dirname</span><span class="p">}</span><span class="s2">/dog.txt`</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">res</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">superagent</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span>
      <span class="s2">`https://dog.ceo/api/breed/</span><span class="p">${</span><span class="nx">data</span><span class="p">}</span><span class="s2">/images/random`</span>
    <span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">res</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">message</span><span class="p">)</span>

    <span class="k">await</span> <span class="nx">writeFilePromise</span><span class="p">(</span><span class="dl">'</span><span class="s1">dog-img.txt</span><span class="dl">'</span><span class="p">,</span> <span class="nx">imgs</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="dl">'</span><span class="se">\n</span><span class="dl">'</span><span class="p">));</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Random dog image saved to file!</span><span class="dl">'</span><span class="p">);</span>


  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
    <span class="k">throw</span> <span class="nx">err</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">};</span>

<span class="nx">getDogPic</span><span class="p">()</span>

</code></pre></div></div>

<p>The await will make sure it waits for code to finish, once finished it will store it to variable. In in order to catch the error, we just wrap it in an try/catch block. So hope you can see how this looks sync even though is async code!</p>

<p>So this is called synthetic sugar for promises, it is still the same on the back but looks better on the front üòä.</p>

<p><strong>Bonus - <code class="language-plaintext highlighter-rouge">Promise.all</code></strong></p>

<p>We can wait for multiple promises using <code class="language-plaintext highlighter-rouge">Promise.all</code> by passing as an array of some saved promises. Example:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">res1Pro</span> <span class="o">=</span> <span class="nx">superagent</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span>
    <span class="s2">`https://dog.ceo/api/breed/</span><span class="p">${</span><span class="nx">data</span><span class="p">}</span><span class="s2">/images/random`</span>
  <span class="p">);</span>
  <span class="kd">const</span> <span class="nx">res2Pro</span> <span class="o">=</span> <span class="nx">superagent</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span>
    <span class="s2">`https://dog.ceo/api/breed/</span><span class="p">${</span><span class="nx">data</span><span class="p">}</span><span class="s2">/images/random`</span>
  <span class="p">);</span>
  <span class="kd">const</span> <span class="nx">res3Pro</span> <span class="o">=</span> <span class="nx">superagent</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span>
    <span class="s2">`https://dog.ceo/api/breed/</span><span class="p">${</span><span class="nx">data</span><span class="p">}</span><span class="s2">/images/random`</span>
  <span class="p">);</span>
  <span class="kd">const</span> <span class="nx">all</span> <span class="o">=</span> <span class="k">await</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">all</span><span class="p">([</span><span class="nx">res1Pro</span><span class="p">,</span> <span class="nx">res2Pro</span><span class="p">,</span> <span class="nx">res3Pro</span><span class="p">]);</span>
  <span class="kd">const</span> <span class="nx">imgs</span> <span class="o">=</span> <span class="nx">all</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">el</span> <span class="o">=&gt;</span> <span class="nx">el</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">imgs</span><span class="p">);</span>
</code></pre></div></div>

<h2 id="further-reading">Further Reading</h2>
<ul>
  <li><a href="https://nodejs.org/en/docs/"><strong>Node Docs</strong></a></li>
  <li><a href="http://callbackhell.com/"><strong>Callback Hell</strong></a></li>
  <li><a href="https://blog.risingstack.com/node-js-async-best-practices-avoiding-callback-hell-node-js-at-scale/"><strong>Node.js Async Best Practices &amp; Avoiding the Callback Hell</strong></a></li>
</ul>
:ET