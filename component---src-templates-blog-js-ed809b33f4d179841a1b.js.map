{"version":3,"sources":["webpack:///./src/templates/blog.js"],"names":["query","Blog","state","selectedYear","filteredYears","display_posts","_","orderBy","getPages","props","pageContext","pages","showAllPosts","setState","filterPostsByYear","year","filter","post","name","includes","handleYearSelect","e","value","target","componentDidMount","this","render","className","get","map","action","action_idx","key","to","withPrefix","rel","classNames","Fragment","icon","onChange","getPostsYears","years","length","post_idx","src","alt","randomImage","dateTime","moment","strftime","React","Component"],"mappings":"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","file":"component---src-templates-blog-js-ed809b33f4d179841a1b.js","sourcesContent":["import React, { useState } from \"react\";\nimport _ from \"lodash\";\nimport moment from \"moment-strftime\";\nimport { graphql } from \"gatsby\";\n\nimport { Layout } from \"../components/index\";\nimport { getPages, Link, withPrefix, classNames } from \"../utils\";\nimport {randomImage, getPostsYears} from '../utils/helpers'\nimport Icon from '../components/Icon';\n\n\nexport const query = graphql`\n  query($url: String) {\n    sitePage(path: { eq: $url }) {\n      id\n    }\n  }\n`;\n\nexport default class Blog extends React.Component {\n  state = {\n    selectedYear: \"\",\n    filteredYears: [],\n    display_posts: _.orderBy(\n      getPages(this.props.pageContext.pages, \"/posts\"),\n      \"frontmatter.date\",\n      \"desc\"\n      ),\n  }\n  \n  componentDidMount(){\n    this.showAllPosts();\n  }\n\n  showAllPosts = () => {\n    this.setState({ \n      selectedYear: \"all\",\n      filteredYears: [...this.state.display_posts],\n    });  \n  }\n\n  filterPostsByYear = (year) => {\n    return this.state.display_posts.filter(post => post.name.includes(year))\n  }\n\n  handleYearSelect = (e) => {\n    const value = e.target.value\n\n    if (value === \"all\") {\n      this.showAllPosts();\n    } else {\n      this.setState({ \n        ...this.state,\n        selectedYear: value,\n        filteredYears: this.filterPostsByYear(value)\n      });\n    }\n  }\n  \n  render() {\n    return (\n      <Layout {...this.props}>\n        <small className=\"muted-center\">Other Publications: </small>\n        {_.get(this.props, 'pageContext.site.siteMetadata.header.has_social', null) && (\n                  <div className=\"social-links\">\n                    {_.map(_.get(this.props, 'pageContext.site.siteMetadata.body.blog_icon', null), (action, action_idx) => (\n                    action && (\n                    <Link key={action_idx} to={withPrefix(_.get(action, 'url', null))}\n                      {...(_.get(action, 'new_window', null) ? ({target: '_blank'}) : null)}\n                      {...((_.get(action, 'new_window', null) || _.get(action, 'no_follow', null)) ? ({rel: (_.get(action, 'new_window', null) ? ('noopener ') : '') + (_.get(action, 'no_follow', null) ? ('nofollow') : '')}) : null)}\n                      className={classNames({'button button-icon': _.get(action, 'style', null) === 'icon'})}>\n                      {((_.get(action, 'style', null) === 'icon') && _.get(action, 'icon_class', null)) ? (<React.Fragment>\n                        <Icon {...this.props} icon={_.get(action, 'icon_class', null)} />\n                        <span className=\"screen-reader-text\">{_.get(action, 'label', null)}</span>\n                      </React.Fragment>) : \n                      _.get(action, 'label', null)\n                      }\n                    </Link>\n                    )\n                    ))}\n                  </div>\n              )}\n\n        <select \n          name=\"years\" \n          className=\"custom-select\"\n          onChange={this.handleYearSelect}\n          value={this.state.selectedYear}\n        >\n        <option value=\"all\">--All Years--</option>\n        {getPostsYears(this.state.display_posts).map((years, key) => (\n            <option key={key} value={years}>\n              {years}\n            </option>\n          ))}\n        </select>\n        <small className=\"muted-center\">\n          Showing {\n            this.state.filteredYears.length\n          } posts\n        </small><br/>\n        \n\n        <header className=\"screen-reader-text\">\n          <h1>{_.get(this.props, \"pageContext.frontmatter.title\", null)}</h1>\n        </header>\n        <div className=\"post-feed\">\n          <div className=\"post-feed-inside\">\n            {_.map(this.state.filteredYears, (post, post_idx) => (\n              <article key={post_idx} className=\"post post-card\">\n                <div className=\"post-inside\">\n                  {_.get(post, \"frontmatter.thumb_img_path\", null) ? (\n                    <Link\n                      className=\"post-thumbnail\"\n                      to={withPrefix(_.get(post, \"url\", null))}\n                    >\n                      <img\n                        src={withPrefix(\n                          _.get(post, \"frontmatter.thumb_img_path\", null)\n                        )}\n                        alt={_.get(post, \"frontmatter.thumb_img_alt\", null)}\n                      />\n                    </Link>\n                  ) : (\n                    <Link\n                      className=\"post-thumbnail\"\n                      to={withPrefix(_.get(post, \"url\", null))}\n                    >\n                      <img src={`/images/${randomImage(5)}.jpg`} alt=\"Default image\" />\n                    </Link>\n                  )}\n                  <header className=\"post-header\">\n                    <h2 className=\"post-title\">\n                      <Link\n                        to={withPrefix(_.get(post, \"url\", null))}\n                        rel=\"bookmark\"\n                      >\n                        {_.get(post, \"frontmatter.title\", null)}\n                      </Link>\n                    </h2>\n                  </header>\n                  {_.get(post, \"frontmatter.excerpt\", null) && (\n                    <div className=\"post-content\">\n                      <p>{_.get(post, \"frontmatter.excerpt\", null)}</p>\n                    </div>\n                  )}\n                  <footer className=\"post-meta\">\n                    <time\n                      className=\"published\"\n                      dateTime={moment(\n                        _.get(post, \"frontmatter.date\", null)\n                      ).strftime(\"%Y-%m-%d %H:%M\")}\n                    >\n                      {moment(_.get(post, \"frontmatter.date\", null)).strftime(\n                        \"%B %d, %Y\"\n                      )}\n                    </time>\n                  </footer>\n                </div>\n              </article>\n            ))}\n          </div>\n        </div>\n      </Layout>\n    );\n  }\n}\n"],"sourceRoot":""}