---
layout: post
title:      "What is a Three-Tier Architecture?"
# date:       2020-06-22 19:31:03 -0400
permalink:  three_tier_architecture
filename: 2020-06-22-three_tier_architecture
---

> We often hear people talking about the three tier architecture for web development...while these tiers often have different languages, there are systems that implement a single language for all tiers

# What is a Three-Tier Architecture?

We often hear people talking about the three tier architecture for web development. In this approach, the entire web application is organized into three different layers. 

1. The *presentation layer* which is concerned with delivering the information to the user. So, those are usually the UI related concerns that are dealt with at the presentation layer. Here we usually have HTML, CSS, and JavaScript.
2. The *business logic layer* on the other hand is concerned more about the data, the data validation, the dynamic content processing, and generating the content to be delivered to the user. Here we usually have Ruby, Python, Java, C++ or PHP.
3. This is backed up behind the scenes with the data persistence layer or the *data access layer*. So, this is concerned with how we store and interact with the data, typically in the form of a database and access this data through an API. So business logic layer interacts with the database like mySQL or Postgress.

There needs to be specialist in on one or the other layers. So you can specialize in one or the other layer. Also, while these tiers often have different languages, there are systems that implement a single language for all tiers.

![1](https://user-images.githubusercontent.com/15071636/82156217-93e76b00-983f-11ea-9ed2-efcb1b31db65.png)

**Frontend vs Backend**

*Front End*

Typically, in a browser where the user accesses the information, and this is where we use technologies like HTML, CSS and JavaScript to render the content for the user.

*Backend*

This information delivery is supported behind the scenes by a back end support which is typically implemented these days using technologies like PHP, Java, ASP.NET, Ruby, Python or NodeJS.

**Unifying a Single Language**

There's a trend in using **one language** for all three tiers. This will make one more prone to specialize as *full-stack web developer*. This is what Javascript try to do by implementing for example React presentation, NodeJS business logic and MongoDB for data access. 

![2](https://user-images.githubusercontent.com/15071636/82156410-8b436480-9840-11ea-97ce-92bbe22307a7.png)

So, you could have the front end implemented for example, as a single page application using frameworks like Angular or React. You have the server side or the business logic layer being implemented using technologies like NodeJS, which is also dependent on JavaScript, and then you have the data storage itself being implemented using technologies like Mongo DB, which stores data in the form of JSON documents. The information exchange between the server-side and the client-side is usually done using JSON as the format, and the server-side supports a REST API endpoint.

**Resources**

<ul><li><a href="http://www.laurencegellert.com/2012/08/what-is-a-full-stack-developer/" target="_blank" rel="noopener nofollow">What is a Full Stack developer?</a></li><li><a href="http://edward-designer.com/web/full-stack-web-developer/" target="_blank" rel="noopener nofollow">Wait, Waitâ€¦ What is a Full-stack Web Developer After All?</a></li><li><a href="http://andyshora.com/full-stack-developers.html" target="_blank" rel="noopener nofollow">The Myth of the Full-stack Developer</a></li><li><a href="https://en.wikipedia.org/wiki/Multitier_architecture" target="_blank" rel="noopener nofollow">Multi-tier Architecture</a></li><li><a href="http://www.tonymarston.net/php-mysql/3-tier-architecture.html" target="_blank" rel="noopener nofollow">What is the 3-Tier Architecture?</a></li></ul>