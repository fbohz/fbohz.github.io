{"version":3,"sources":["webpack:///./src/templates/blog.js"],"names":["query","Blog","state","selectedYear","filteredYears","display_posts","_","orderBy","getPages","props","pageContext","pages","showAllPosts","setState","filterPostsByYear","year","filter","post","name","includes","handleYearSelect","e","value","target","componentDidMount","this","render","className","onChange","getPostsYears","map","years","key","length","get","post_idx","to","withPrefix","src","alt","randomImage","rel","dateTime","moment","strftime","React","Component"],"mappings":"+mCASO,IAAMA,EAAK,aAQGC,E,4JACnBC,MAAQ,CACNC,aAAc,GACdC,cAAe,GACfC,cAAeC,IAAEC,QACfC,YAAS,EAAKC,MAAMC,YAAYC,MAAO,UACvC,mBACA,S,EAQJC,aAAe,WACb,EAAKC,SAAS,CACZV,aAAc,MACdC,cAAc,EAAK,EAAKF,MAAMG,kB,EAIlCS,kBAAoB,SAACC,GACnB,OAAO,EAAKb,MAAMG,cAAcW,QAAO,SAAAC,GAAI,OAAIA,EAAKC,KAAKC,SAASJ,O,EAGpEK,iBAAmB,SAACC,GAClB,IAAMC,EAAQD,EAAEE,OAAOD,MAET,QAAVA,EACF,EAAKV,eAEL,EAAKC,SAAL,iBACK,EAAKX,MADV,CAEEC,aAAcmB,EACdlB,cAAe,EAAKU,kBAAkBQ,O,oHAxB5CE,kBAAA,WACEC,KAAKb,gB,EA4BPc,OAAA,WACE,OACE,kBAAC,IAAWD,KAAKhB,MAEf,4BACES,KAAK,QACLS,UAAU,gBACVC,SAAUH,KAAKL,iBACfE,MAAOG,KAAKvB,MAAMC,cAEpB,4BAAQmB,MAAM,OAAd,iBACCO,YAAcJ,KAAKvB,MAAMG,eAAeyB,KAAI,SAACC,EAAOC,GAAR,OACzC,4BAAQA,IAAKA,EAAKV,MAAOS,GACtBA,OAIP,2BAAOJ,UAAU,gBAAjB,WAEIF,KAAKvB,MAAME,cAAc6B,OAF7B,UAIQ,6BAGR,4BAAQN,UAAU,sBAChB,4BAAKrB,IAAE4B,IAAIT,KAAKhB,MAAO,gCAAiC,QAE1D,yBAAKkB,UAAU,aACb,yBAAKA,UAAU,oBACZrB,IAAEwB,IAAIL,KAAKvB,MAAME,eAAe,SAACa,EAAMkB,GAAP,OAC/B,6BAASH,IAAKG,EAAUR,UAAU,kBAChC,yBAAKA,UAAU,eACZrB,IAAE4B,IAAIjB,EAAM,6BAA8B,MACzC,kBAAC,IAAD,CACEU,UAAU,iBACVS,GAAIC,YAAW/B,IAAE4B,IAAIjB,EAAM,MAAO,QAElC,yBACEqB,IAAKD,YACH/B,IAAE4B,IAAIjB,EAAM,6BAA8B,OAE5CsB,IAAKjC,IAAE4B,IAAIjB,EAAM,4BAA6B,SAIlD,kBAAC,IAAD,CACEU,UAAU,iBACVS,GAAIC,YAAW/B,IAAE4B,IAAIjB,EAAM,MAAO,QAElC,yBAAKqB,IAAG,WAAaE,YAAY,GAAzB,OAAmCD,IAAI,mBAGnD,4BAAQZ,UAAU,eAChB,wBAAIA,UAAU,cACZ,kBAAC,IAAD,CACES,GAAIC,YAAW/B,IAAE4B,IAAIjB,EAAM,MAAO,OAClCwB,IAAI,YAEHnC,IAAE4B,IAAIjB,EAAM,oBAAqB,SAIvCX,IAAE4B,IAAIjB,EAAM,sBAAuB,OAClC,yBAAKU,UAAU,gBACb,2BAAIrB,IAAE4B,IAAIjB,EAAM,sBAAuB,QAG3C,4BAAQU,UAAU,aAChB,0BACEA,UAAU,YACVe,SAAUC,IACRrC,IAAE4B,IAAIjB,EAAM,mBAAoB,OAChC2B,SAAS,mBAEVD,IAAOrC,IAAE4B,IAAIjB,EAAM,mBAAoB,OAAO2B,SAC7C,wB,GAnHUC,IAAMC","file":"component---src-templates-blog-js-b3498d37c3d73ad778d3.js","sourcesContent":["import React, { useState } from \"react\";\nimport _ from \"lodash\";\nimport moment from \"moment-strftime\";\nimport { graphql } from \"gatsby\";\n\nimport { Layout } from \"../components/index\";\nimport { getPages, Link, withPrefix } from \"../utils\";\nimport {randomImage, getPostsYears} from '../utils/helpers'\n\nexport const query = graphql`\n  query($url: String) {\n    sitePage(path: { eq: $url }) {\n      id\n    }\n  }\n`;\n\nexport default class Blog extends React.Component {\n  state = {\n    selectedYear: \"\",\n    filteredYears: [],\n    display_posts: _.orderBy(\n      getPages(this.props.pageContext.pages, \"/posts\"),\n      \"frontmatter.date\",\n      \"desc\"\n      ),\n  }\n  \n  componentDidMount(){\n    this.showAllPosts();\n  }\n\n  showAllPosts = () => {\n    this.setState({ \n      selectedYear: \"all\",\n      filteredYears: [...this.state.display_posts],\n    });  \n  }\n\n  filterPostsByYear = (year) => {\n    return this.state.display_posts.filter(post => post.name.includes(year))\n  }\n\n  handleYearSelect = (e) => {\n    const value = e.target.value\n\n    if (value === \"all\") {\n      this.showAllPosts();\n    } else {\n      this.setState({ \n        ...this.state,\n        selectedYear: value,\n        filteredYears: this.filterPostsByYear(value)\n      });\n    }\n  }\n  \n  render() {\n    return (\n      <Layout {...this.props}>\n\n        <select \n          name=\"years\" \n          className=\"custom-select\"\n          onChange={this.handleYearSelect}\n          value={this.state.selectedYear}\n        >\n        <option value=\"all\">--All Years--</option>\n        {getPostsYears(this.state.display_posts).map((years, key) => (\n            <option key={key} value={years}>\n              {years}\n            </option>\n          ))}\n        </select>\n        <small className=\"muted-center\">\n          Showing {\n            this.state.filteredYears.length\n          } posts\n        </small><br/>\n        \n\n        <header className=\"screen-reader-text\">\n          <h1>{_.get(this.props, \"pageContext.frontmatter.title\", null)}</h1>\n        </header>\n        <div className=\"post-feed\">\n          <div className=\"post-feed-inside\">\n            {_.map(this.state.filteredYears, (post, post_idx) => (\n              <article key={post_idx} className=\"post post-card\">\n                <div className=\"post-inside\">\n                  {_.get(post, \"frontmatter.thumb_img_path\", null) ? (\n                    <Link\n                      className=\"post-thumbnail\"\n                      to={withPrefix(_.get(post, \"url\", null))}\n                    >\n                      <img\n                        src={withPrefix(\n                          _.get(post, \"frontmatter.thumb_img_path\", null)\n                        )}\n                        alt={_.get(post, \"frontmatter.thumb_img_alt\", null)}\n                      />\n                    </Link>\n                  ) : (\n                    <Link\n                      className=\"post-thumbnail\"\n                      to={withPrefix(_.get(post, \"url\", null))}\n                    >\n                      <img src={`/images/${randomImage(5)}.jpg`} alt=\"Default image\" />\n                    </Link>\n                  )}\n                  <header className=\"post-header\">\n                    <h2 className=\"post-title\">\n                      <Link\n                        to={withPrefix(_.get(post, \"url\", null))}\n                        rel=\"bookmark\"\n                      >\n                        {_.get(post, \"frontmatter.title\", null)}\n                      </Link>\n                    </h2>\n                  </header>\n                  {_.get(post, \"frontmatter.excerpt\", null) && (\n                    <div className=\"post-content\">\n                      <p>{_.get(post, \"frontmatter.excerpt\", null)}</p>\n                    </div>\n                  )}\n                  <footer className=\"post-meta\">\n                    <time\n                      className=\"published\"\n                      dateTime={moment(\n                        _.get(post, \"frontmatter.date\", null)\n                      ).strftime(\"%Y-%m-%d %H:%M\")}\n                    >\n                      {moment(_.get(post, \"frontmatter.date\", null)).strftime(\n                        \"%B %d, %Y\"\n                      )}\n                    </time>\n                  </footer>\n                </div>\n              </article>\n            ))}\n          </div>\n        </div>\n      </Layout>\n    );\n  }\n}\n"],"sourceRoot":""}